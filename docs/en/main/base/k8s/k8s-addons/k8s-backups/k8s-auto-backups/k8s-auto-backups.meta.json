{
  "title": "Automatic backups with Velero",
  "pageDescription": "",
  "shortDescription": "",
  "metaTitle": "Automatic backups with Velero - VK Cloud",
  "metaDescription": "Description Velero is a handy backup tool for kubernetes that compresses and backs up kubernetes objects to object storage. It can also take a snapshot of",
  "sectionTitle": "Automatic backups with Velero",
  "markdown": "Description\n-----------\n\nVelero is a handy backup tool for kubernetes that compresses and backs up kubernetes objects to object storage.\n\nIt can also take a snapshot of a persistent volume cluster using the cloud provider's block device snapshot capabilities.\n\nAs a result, Velero can deploy persistent volumes from a backup in their original form.\n\nEach Velero operation - On-Demand Backup, Scheduled Backup, Restore from Backup - is a custom resource defined using Custom Resource Defenition (CRD). Velero also contains its own controllers to track backup operations.\n\nVelero is ideal for a disaster recovery plan and for preparing a kubernetes cluster for upgrade by taking snapshots of the cluster resource state.\n\nIn this scenario, we will install and configure the velero to interact with the kubernetes cluster from VK Cloud and make a backup of the namespace with all the content to the S3 cloud storage.\n\nInstalling Velero client\n------------------------\n\nVelero consists of a client that is installed on the local computer of the administrator of the kubernetes cluster and a server that runs in the kubernetes cluster itself.\n\nInstall the Velero client on Ubuntu 18.04 from the project's release list on GitHub [https://github.com/vmware-tanzu/velero/releases](https://github.com/vmware-tanzu/velero/releases)\n\nWe will use the current stable version of the project - 1.2.0\n\nDownload the archive with the client to the local kubernetes administrator machine:\n\n wget https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz\n\nUnpack the archive and transfer the binary file to the directory of executable programs\n\n tar -xvf velero-v1.2.0-linux-amd64.tar.gz\nmv velero / usr / bin /\n\nLet's make sure the Velero is working - let's call the reference information:\n\n velero --help\n\nCreating a bucket for backups\n-----------------------------\n\nSince velero saves its backups to s3 storage, it is necessary to create a bucket in s3 storage VK Cloud before installing the server into the cluster.\n\nLet's create a veleromail bucket via VK Cloud Panel in the \"Object Storage\" section.\n\nVelero communicates with s3 repositories through the AWS S3 plugin, so the communication protocol will operate in terms of AWS Object Storage.\n\nSince we need keys to access the bucket, let's create a s3\\_creds file in the directory with the following content:\n\n \\[default\\]\naws\\_access\\_key\\_id = <AWS\\_ACCESS\\_KEY\\_ID>\naws\\_secret\\_access\\_key = <AWS\\_SECRET\\_ACCESS\\_KEY>\n\nAccess keys can be obtained when creating an account in the VK Cloud Panel in the \"Object storage\" section.\n\nInstalling the velero server\n----------------------------\n\nA Velero installation consists of several kubernetes objects that work together to create, schedule, and manage backups.\n\nThe velero install command will take the preliminary steps to set up your cluster, in particular:\n\n*   will create namespace velero\n*   add velero service account\n*   configures rbac to access the velero account service\n*   will install CRD for specific velero resources - Backup, Schedule, Restore, Config\n\nLet's execute the command:\n\n velero install \\\\\n--plugins velero / velero-plugin-for-aws: v1.0.0 \\\\\n--provider aws \\\\\n--bucket veleromail \\\\\n--secret-file ./s3\\_cred \\\\\n--use-volume-snapshots = false \\\\\n--backup-location-config region = mail, s3ForcePathStyle = \"true\", s3Url = https: //hb.bizmrg.com: 443\n\nLet's dwell on the arguments in detail:\n\n*   \\--plugins velero / velero-plugin-for-aws: v1.0.0 - plugin for interacting with s3 storage for backups\n*   \\--provaider aws - protocol for interacting with s3 storage\n*   \\--bucket veleromail - bucket for backups\n*   \\--secret-file ./s3\\_cred - file with keys for connecting to s3 storage\n*   \\--use-volume-snapshots = false - we will not use pv snapshots for the current provider\n*   \\--backup-location-config region = mail, s3ForcePathStyle = \"true\", s3Url = https: //hb.bizmrg.com: 443 - endpoint of connection to VK Cloud Object Storage\n\nAfter executing the command, we should see similar output:\n\n CustomResourceDefinition / backups.velero.io: attempting to create resource\nCustomResourceDefinition / backups.velero.io: created\nCustomResourceDefinition / backupstoragelocations.velero.io: attempting to create resource\nCustomResourceDefinition / backupstoragelocations.velero.io: created\nCustomResourceDefinition / deletebackuprequests.velero.io: attempting to create resource\nCustomResourceDefinition / deletebackuprequests.velero.io: created\nCustomResourceDefinition / downloadrequests.velero.io: attempting to create resource\nCustomResourceDefinition / downloadrequests.velero.io: created\nCustomResourceDefinition / podvolumebackups.velero.io: attempting to create resource\nCustomResourceDefinition / podvolumebackups.velero.io: created\nCustomResourceDefinition / podvolumerestores.velero.io: attempting to create resource\nCustomResourceDefinition / podvolumerestores.velero.io: created\nCustomResourceDefinition / resticrepositories.velero.io: attempting to create resource\nCustomResourceDefinition / resticrepositories.velero.io: created\nCustomResourceDefinition / restores.velero.io: attempting to create resource\nCustomResourceDefinition / restores.velero.io: created\nCustomResourceDefinition / schedules.velero.io: attempting to create resource\nCustomResourceDefinition / schedules.velero.io: created\nCustomResourceDefinition / serverstatusrequests.velero.io: attempting to create resource\nCustomResourceDefinition / serverstatusrequests.velero.io: created\nCustomResourceDefinition / volumesnapshotlocations.velero.io: attempting to create resource\nCustomResourceDefinition / volumesnapshotlocations.velero.io: created\nWaiting for resources to be ready in cluster ...\nNamespace / velero: attempting to create resource\nNamespace / velero: created\nClusterRoleBinding / velero: attempting to create resource\nClusterRoleBinding / velero: created\nServiceAccount / velero: attempting to create resource\nServiceAccount / velero: created\nSecret / cloud-credentials: attempting to create resource\nSecret / cloud-credentials: created\nBackupStorageLocation / default: attempting to create resource\nBackupStorageLocation / default: created\nDeployment / velero: attempting to create resource\nDeployment / velero: created\nVelero is installed! ⛵ Use 'kubectl logs deployment / velero -n velero' to view the status.\n\nCheck the status with the command:\n\n kubectl logs deployment / velero -n velero\n\nThe output should not contain errors.\n\nCreating backups\n----------------\n\nWe will check the creation and restoration from backups using the nginx server as an example.\n\nLet's create an nginx-app.yml file with the following content:\n\n ---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: nginx-example\nlabels:\napp: nginx\n---\napiVersion: apps / v1\nkind: Deployment\nmetadata:\nname: nginx-deployment\nnamespace: nginx-example\nspec:\nreplicas: 2\nselector:\nmatchLabels:\napp: nginx\ntemplate:\nmetadata:\nlabels:\napp: nginx\nspec:\ncontainers:\n- image: nginx\nname: nginx\nports:\n- containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp: nginx\nname: my-nginx\nnamespace: nginx-example\nspec:\nports:\n- port: 80\ntargetPort: 80\nselector:\napp: nginx\ntype: LoadBalancer\n\nLet's apply this manifest:\n\n kubectl apply -f nginx-app.yaml\n\nWe should see the following in the command output:\n\n namespace / nginx-example created\ndeployment.apps / nginx-deploy created\nservice / nginx-svc created\n\nA nginx-example namespace with a running nginx server will appear in our cluster.\n\nLet's see what IP address will be issued to the nginx loadbalancer kubernetes service and go to this IP in the browser:\n\n kubectl get svc -n nginx-example \nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT (S) AGE\nmy-nginx LoadBalancer 10.254.3.81 95.163.208.41 80: 32626 / TCP 4h3m\n\nVelero offers a wide variety of backup options. We can specify objects with specific labels via selector, or specify the entire namespace as a whole.\n\nCreate a backup for the entire nginx-example namespace by running the following command:\n\n velero backup create nginx-example --include-namespaces nginx-example\n\nTo view existing backups, velero has the velero get backups command:\n\n # velero get backups \nNAME STATUS CREATED EXPIRES STORAGE LOCATION SELECTOR\nnginx-example Completed 2020-02-07 16:02:26 +0300 MSK 29d default <none>\n\nWe also have the opportunity to study the contents of the backup in more detail with the describe command:\n\n velero backup describe nginx-backup --details\n\n Name: nginx-example\n\nNamespace: velero\n\nLabels: velero.io/storage-location=default\nAnnotations: <none>\n\nPhase: Completed\n\nNamespaces:\nIncluded: nginx-example\nExcluded: <none>\nResources:\nIncluded: \\*\nExcluded: <none>\nCluster-scoped: auto\n\nLabel selector: <none>\n\nStorage Location: default\n\nSnapshot PVs: auto\n\nTTL: 720h0m0s\n\nHooks: <none>\n\nBackup Format Version: 1\n\nStarted: 2020-02-07 16:02:26 +0300 MSK\nCompleted: 2020-02-07 16:02:27 +0300 MSK\n\nExpiration: 2020-03-08 16:02:26 +0300 MSK\n\nResource List:\napps / v1 / Deployment:\n- nginx-example / nginx-deployment\napps / v1 / ReplicaSet:\n- nginx-example / nginx-deployment-5754944d6c\n- nginx-example / nginx-deployment-7bfb85948d\nv1 / Endpoints:\n- nginx-example / my-nginx\nv1 / Namespace:\n- nginx-example\nv1 / Pod:\n- nginx-example / nginx-deployment-7bfb85948d-jfzh9\n- nginx-example / nginx-deployment-7bfb85948d-x7h7t\nv1 / Secret:\n- nginx-example / default-token-9svxb\nv1 / Service:\n- nginx-example / my-nginx\nv1 / ServiceAccount:\n- nginx-example / default\n\nPersistent Volumes: <none included>\n\nThe list of resources reflects each of the Kubernetes objects that got into the backup.\n\nMake sure there is a backup in s3 storage\n\nRestore from backup\n-------------------\n\nLet's simulate a disaster and remove the namespace with our test application:\n\n kubectl delete ns nginx-example\n\nMake sure the namespace is removed\n\n kubectl get ns \nNAME STATUS AGE\ndefault Active 21h\ningress-nginx Active 21h\nkube-node-lease Active 21h\nkube-public Active 21h\nkube-system Active 21h\nmagnum-tiller Active 21h\nvelero Active 3h16m\n\nNow let's start restoring from a backup. Let's set the command:\n\n velero restore create --from-backup nginx-example\nRestore request \"nginx-example-20200207171734\" submitted successfully.\nRun \\`velero restore describe nginx-example-20200207171734\\` or\\` velero restore logs nginx-example-20200207171734\\` for more details.\n\nThe namespace with all resources has been successfully restored.\n\nWe will verify this by running the following command:\n\n k get po -n nginx-example \nNAME READY STATUS RESTARTS AGE\nnginx-deployment-7bfb85948d-jfzh9 1/1 Running 0 62s\nnginx-deployment-7bfb85948d-x7h7t 1/1 Running 0 62s\n\nAs you can see, the namespace and web server pods have been restored.\n\nCreating a backup on a schedule\n-------------------------------\n\nVelero has a mechanism for creating scheduled backups. A scheduler is responsible for this, which is similar in functionality to cron.\n\nLet's create a schedule for an hourly backup of the test namespace nginx-example. To do this, run the command:\n\n velero schedule create daily --schedule = \"@ every 1h\" --include-namespaces nginx-example --ttl 24h0m0s\n\nAt the stage of creating a schedule, you need to specify the name of the schedule - in our case, daily and set parameters through the arguments.\n\n\\--schedule = \"@ every 1h\" - create once per hour. This parameter can take various options for setting the schedule as arguments - including the cron scheme.\n\nFor example, the help for this parameter looks like this:\n\n velero schedule create NAME --schedule \\[flags\\]\nExamples:\n# Create a backup every 6 hours\nvelero create schedule NAME --schedule = \"0 \\* / 6 \\* \\* \\*\"\n\n\n# Create a backup every 6 hours with the @every notation\nvelero create schedule NAME --schedule = \"@ every 6h\"\n\n\n# Create a daily backup of the web namespace\nvelero create schedule NAME --schedule = \"@ every 24h\" --include-namespaces web\n\n\n# Create a weekly backup, each living for 90 days (2160 hours)\nvelero create schedule NAME --schedule = \"@ every 168h\" --ttl 2160h0m0s\n\n*   \\--include-namespaces nginx-example - which namespace we include in the backup\n*   \\--ttl - how long the backup version will live before deleting\n\nTo see what the schedules are, run the command:\n\n velero get schedule \nNAME STATUS CREATED SCHEDULE BACKUP TTL LAST BACKUP SELECTOR\ndaily Enabled 2020-02-07 17:27:00 +0300 MSK @every 1h 24h0m0s 8m ago <none>\n\nIn the list of backups, a scheduled backup will have a prefix with the name of the schedule.\n\n velero get backups \nNAME STATUS CREATED EXPIRES STORAGE LOCATION SELECTOR\ndaily-20200207142700 Completed 2020-02-07 17:27:00 +0300 MSK 23h default <none>\nnginx-example Completed 2020-02-07 16:02:26 +0300 MSK 29d default <none>",
  "icon": "",
  "infobarItems": null,
  "uuid": "ddc9a7ce-1cc7-498c-b64f-fd4e0e9f879b"
}