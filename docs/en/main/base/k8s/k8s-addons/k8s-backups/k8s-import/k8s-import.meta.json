{
  "title": "Cluster export and import",
  "pageDescription": "",
  "shortDescription": "",
  "metaTitle": "Cluster export and import - VK Cloud",
  "metaDescription": "Using the Velero software product, you can create a backup copy of a Kubernetes cluster to the VK Cloud cloud - and deploy this copy to a ne",
  "sectionTitle": "Cluster export and import",
  "markdown": "Using the Velero software product, you can create a backup copy of a Kubernetes cluster to the VK Cloud cloud - and deploy this copy to a new cluster. This operation is useful when you want to replicate a custom cluster.\n\nFor this you will need:\n\n*   Kubernetes cluster deployed in VK Cloud\n*   Velero client\n*   OpenStack Plugin\n\nDescription\n-----------\n\nVelero is a handy Kubernetes backup tool that compresses and backs up Kubernetes objects to object storage.\n\nIt can also take a snapshot from a persistent volume cluster using the cloud provider's block device snapshot capabilities.\n\nAs a result, Velero can deploy persistent volumes from a backup in their original form.\n\nEvery Velero operation - on-demand backup, scheduled backup, restore from backup - is a custom resource defined using a Custom Resource Definition (CRD). Velero also contains its own controllers for tracking backup operations.\n\nVelero is ideal for a disaster recovery plan and for preparing a kubernetes cluster for an upgrade by taking snapshots of the cluster resource state.\n\nIn this scenario, we will install and configure velero to interact with the kubernetes cluster on VK Cloud and make a backup of the cluster with all its content to the S3 cloud storage VK Cloud Storage using the Openstack plugin.\n\nInstalling Velero client\n------------------------\n\nVelero consists of a client that is installed on the local computer of the administrator of the kubernetes cluster and a server that runs in the kubernetes cluster itself.\n\nInstall Velero client on Ubuntu 18.04 from the project's release list on GitHub\n\n https://github.com/vmware-tanzu/velero/releases\n\nWe will use the current stable version of the project - 1.2.0.\n\nDownload the archive with the client to the local kubernetes administrator machine, unpack and install:\n\n wget https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz\ntar -zxvf velero-v1.2.0-linux-amd64.tar.gz\nsudo cp velero-v1.2.0-linux-amd64 / velero / usr / local / bin\nvelero version\n\nCreating a bucket for backups\n-----------------------------\n\nSince Velero saves its backups to S3 storage, it is necessary to create a bucket in S3 storage before installing the server into the cluster.\n\nLet's create a velero bucket in the Object Storage service using the VK Cloud Panel.\n\nYou also need to create an account to access the bucket in the Object Storage service and get access keys:\n\nWe will write the obtained access keys to the s3\\_creds file:\n\n \\[default\\]\naws\\_access\\_key\\_id = <Access Key ID>\naws\\_secret\\_access\\_key = <Secret Key>\n\nInstalling velero on a Kubernetes cluster\n-----------------------------------------\n\nLet's execute the command:\n\n velero install --plugins velero / velero-plugin-for-aws: v1.0.0 --provider aws --bucket my\\_velero\\_backup --secret-file ./s3\\_cred --use-volume-snapshots = false --backup-location-config region = mail, s3ForcePathStyle = \"true\", s3Url = https: //hb.bizmrg.com: 443\n\nLet's dwell on the arguments in detail:\n\n*   \\--plugins velero / velero-plugin-for-aws: v1.0.0 - plugin for interacting with S3 storage for backups\n*   \\--provider aws - protocol for interacting with S3 storage\n*   \\--bucket my\\_velero\\_backup - the backup bucket we created in the previous step.\n*   \\--secret-file ./s3\\_cred - a file for secrets with keys to connect to the S3 storage\n*   \\--use-volume-snapshots = false - we will not use pv snapshots for the current provider\n*   \\--backup-location-config region = mail, s3ForcePathStyle = \"true\", s3Url = https: //hb.bizmrg.com: 443 - link to the VK Cloud Storage S3 storage.\n\nAfter executing the command, you can see similar output:\n\n CustomResourceDefinition / backups.velero.io: attempting to create resource\nCustomResourceDefinition / backups.velero.io: already exists, proceeding\nCustomResourceDefinition / backups.velero.io: created\n...\nDeployment / velero: attempting to create resource\nDeployment / velero: already exists, proceeding\nDeployment / velero: created\nVelero is installed! â›µ Use 'kubectl logs deployment / velero -n velero' to view the status.\n\nCheck the status with the command:\n\n kubectl logs deployment / velero -n velero\n\nThe output should not contain errors.\n\nInstalling the Openstack plugin\n-------------------------------\n\nNow you need to install the openstack plugin to work with the openstack cinder repository.\n\nThe first step is to get an openstack rc file containing the environment variables required to access the Openstack API.\n\nYou can get the file in the [\"Project Settings\" menu](https://mcs.mail.ru/app/project/keys/) in your personal account[](https://mcs.mail.ru/app/project/keys/) VK Cloud\n\nSave the file as openrc.sh, add execute permissions and execute:\n\n ... openrc.sh\n\nYou must enter the password for your VK Cloud account. After that, the openstack access parameters will be set in the environment variables.\n\nLet's create a credential file for the plugin using the account settings:\n\n kubectl -n velero create secret generic openstack-cloud-credentials --from-literal OS\\_PROJECT\\_ID = $ OS\\_PROJECT\\_ID --from-literal OS\\_REGION\\_NAME = $ OS\\_REGION\\_NAME --from-literal OS\\_DOMAIN\\_ID = $ OS\\_USIDER\\_DOMAIN\\_ID = $ OS\\_USIDER\\_DOMAIN\\_VERT. from-literal OS\\_PASSWORD = $ OS\\_PASSWORD --from-literal OS\\_AUTH\\_URL = $ OS\\_AUTH\\_URL --from-literal OS\\_USERNAME = $ OS\\_USERNAME --from-literal OS\\_INTERFACE = $ OS\\_INTERFACE --from-literal OS\\_PROINAJECT\\_DOM $ OS\\_FILE\\_OPERATION\\_TIMEOUT -o yaml\napiVersion: v1\ndata:\nOS\\_AUTH\\_URL: aHR0cHM6Ly9pbmZyYS5tYWlsLnJ1OjM1MzU3L3YzLw ==\nOS\\_DOMAIN\\_ID: \"\"\nOS\\_FILE\\_OPERATION\\_TIMEOUT: \"\"\nOS\\_IDENTITY\\_API\\_VERSION: Mw ==\nOS\\_INTERFACE: cHVibGslj\nOS\\_PASSWORD: xxxxxxxxxxxxxx\nOS\\_PROJECT\\_DOMAIN\\_ID: MmY4NDhkYWY3xMWY1NDQ0ZfmIzOWVlZDVdmYmZkOTFiMmI =\nOS\\_PROJECT\\_ID: MGNkYldrWFhNjQwMmQ0NDI0ZTk2NzZjNzVhNzIwYWZhODU =\nOS\\_REGION\\_NAME: UmVnsdaW9uT25l\nOS\\_USERNAME: cm9tYW5lbmtvZGVueXNAZ21haWwuYas29t\nkind: Secret\nmetadata:\ncreationTimestamp: \"2020-04-14T10: 38: 33Z\"\nname: openstack-cloud-credentials\nnamespace: velero\nresourceVersion: \"5976669\"\nselfLink: / api / v1 / namespaces / velero / secrets / openstack-cloud-credentials\nuid: 923ad314-b870-476f-9da7-4b2a526d9bbb\ntype: Opaque\n\nLet's edit the velero deployment. To do this, run the command\n\n kubectl edit deployment / velero -n velero\n\nIn the opened editor window, find the section:\n\n spec:\ncontainers:\n- args:\n- server\ncommand:\n        - / velero\n\nAnd we will bring it to the following form:\n\n spec:\ncontainers:\n- args:\n- server\nenvFrom:\n- secretRef:\nname: openstack-cloud-credentials\ncommand:\n        - / velero\n\nLet's save the deployment.\n\nLet's install the plugin:\n\n velero plugin add registry.infra.mail.ru:5010/test/velero-plugin-openstack:cinder\n\nLet's create a location for storing snapshots:\n\n velero snapshot-location create default --provider openstack \\\\\n> --config region = mail, s3ForcePathStyle = \"true\", s3Url = https: //hb.bizmrg.com: 443, bucket = my\\_velero\\_backup, secret-file =. / s3\\_cred\n\nThe configured locations can be viewed using the command:\n\n velero get snapshot-locations\n\nWill restart the deployment:\n\n kubectl rollout restart deployment / velero -n velero\n\nCreating backups\n----------------\n\nWe will check the creation and restoration from backups using the nginx server as an example.\n\nLet's create an nginx-app.yml file with the following content:\n\n ---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: nginx-example\nlabels:\napp: nginx\n---\napiVersion: apps / v1\nkind: Deployment\nmetadata:\nname: nginx-deployment\nnamespace: nginx-example\nspec:\nreplicas: 2\nselector:\nmatchLabels:\napp: nginx\ntemplate:\nmetadata:\nlabels:\napp: nginx\nspec:\ncontainers:\n- image: nginx\nname: nginx\nports:\n- containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp: nginx\nname: my-nginx\nnamespace: nginx-example\nspec:\nports:\n- port: 80\ntargetPort: 80\nselector:\napp: nginx\n  type: LoadBalancer\n\nLet's apply the manifest:\n\n kubectl apply -f nginx-app.yaml\n\nThe nginx-example namespace with a running nginx server will appear in the cluster  \nLet's see what IP address will be issued to the nginx loadbalancer kubernetes service and go to this IP in the browser:\n\n kubectl get svc -n nginx-example\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT (S) AGE\nmy-nginx LoadBalancer 10.254.244.134 95.163.250.147 80: 31545 / TCP 2m54s\n\nVelero offers a wide variety of backup options. We can specify objects with specific labels through the selector, or specify the entire namespace as a whole.  \n  \nCreate a backup for the entire nginx-example namespace by running the following command:\n\n velero backup create nginx-example --include-namespaces nginx-example\n\nTo view existing backups, velero has the velero get backups command:\n\n velero get backups\nNAME STATUS CREATED EXPIRES STORAGE LOCATION SELECTOR\nnginx-example Completed 2020-04-14 11:25:46 +0000 UTC 29d default <none>\n\nWe also have the opportunity to study the contents of the backup in more detail with the describe command:\n\n velero describe backups\nName: nginx-example\nNamespace: velero\nLabels: velero.io/storage-location=default\nAnnotations: <none>\n\nPhase: Completed\n\nNamespaces:\nIncluded: nginx-example\nExcluded: <none>\n\nResources:\nIncluded: \\*\nExcluded: <none>\nCluster-scoped: auto\n\nLabel selector: <none>\n\nStorage Location: default\n\nSnapshot PVs: auto\n\nTTL: 720h0m0s\n\nHooks: <none>\n\nBackup Format Version: 1\n\nStarted: 2020-04-14 11:25:46 +0000 UTC\nCompleted: 2020-04-14 11:25:52 +0000 UTC\n\nExpiration: 2020-05-14 11:25:46 +0000 UTC\n\nPersistent Volumes: <none included>\n\nThe list of resources reflects each of the Kubernetes objects that got into the backup.\n\nMake sure there is a backup in S3 storage\n\nRestore from backup\n-------------------\n\nLet's simulate a disaster and remove the namespace with our test application:\n\n kubectl delete ns nginx-example\n\nNow let's start restoring from a backup. Run the command:\n\n velero restore create --from-backup nginx-example\nRestore request \"nginx-example-20200414114045\" submitted successfully.\nRun \\`velero restore describe nginx-example-20200414114045\\` or\\` velero restore logs nginx-example-20200414114045\\` for more details.\n\nThe namespace with all resources has been successfully restored. Verify this by running the following command:\n\n kubectl get pods -n nginx-example\nNAME READY STATUS RESTARTS AGE\nnginx-deployment-85ff79dd56-qchn9 1/1 Running 0 95s\nnginx-deployment-85ff79dd56-vgwwn 1/1 Running 0 95s\n\nAs you can see, the namespace and web server pods have been restored.\n\nIf you are restoring to another cluster, then before restoring from a backup, you must repeat the Velero configuration for the new cluster (repeat the Installing velero to a Kubernetes cluster and Installing the Openstack plugin steps). Bucket and bucket access keys are used by existing ones (Bucket where the created backup of the Kubernetes cluster is located).\n\nCreating a backup on a schedule\n-------------------------------\n\nVelero has a mechanism for creating scheduled backups. A scheduler is responsible for this, which is similar in functionality to cron.  \n  \nLet's create a schedule for an hourly backup of the test namespace nginx-example.  \n  \nTo do this, run the command:\n\n velero schedule create daily --schedule = \"@ every 1h\" --include-namespaces nginx-example --ttl 24h0m0s\nSchedule \"daily\" created successfully.\n\nAt the stage of creating a schedule, you need to specify the name of the schedule - in our case, daily and pass parameters through the arguments:\n\n*   \\--schedule = \"@ every 1h\" - create once per hour. This parameter can accept various options for setting the schedule as arguments, including using the cron scheme, for example, - schedule = \"0 \\* / 6 \\* \\* \\*\". Details of use can be found in the help.\n*   \\--include-namespaces nginx-example - which namespace we include in the backup\n*   \\--ttl - how long the backup version will live before deleting\n\nTo see what schedules there are, run the command:\n\n velero get schedule\nNAME STATUS CREATED SCHEDULE BACKUP TTL LAST BACKUP SELECTOR\ndaily Enabled 2020-04-14 11:43:46 +0000 UTC @every 1h 24h0m0s 2m ago <none>\n\nIn the list of backups, a scheduled backup will have a prefix with the name of the schedule:\n\n velero get backups\nNAME STATUS CREATED EXPIRES STORAGE LOCATION SELECTOR\ndaily-20200414114346 Completed 2020-04-14 11:43:46 +0000 UTC 23h default <none>\nnginx-example Completed 2020-04-14 11:25:46 +0000 UTC 29d default <none>\n\nRemoving Velero from a Kubernetes cluster\n-----------------------------------------\n\nIf Velero is no longer needed, then removal is performed with the following command:\n\n kubectl delete namespace / velero clusterrolebinding / velero",
  "icon": "",
  "infobarItems": null,
  "uuid": "090dd7f7-3f53-4058-90cb-b306e6b53c3c"
}