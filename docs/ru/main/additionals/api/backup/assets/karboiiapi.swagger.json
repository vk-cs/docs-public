{
    "swagger": "2.0",
    "info": {
      "description": "karboii_karti",
      "version": "0.0.1",
      "title": "karboii server"
    },
    "host": "mcs.mail.ru",
    "schemes": [
      "https"
    ],
    "basePath": "/infra/karboii/v1",
    "securityDefinitions": {
      "keystone": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Auth-Token"
      }
    },
    "security": [
      {
        "keystone": []
      }
    ],
    "paths": {
      "/{project_id}/plans": {
        "post": {
          "tags": [
            "plans"
          ],
          "summary": "Create a plan",
          "operationId": "createPlan",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "plan",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/postPlanRequest"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/planResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            },
            "500": {
              "description": "Unable to create plan",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "get": {
          "tags": [
            "plans"
          ],
          "summary": "List plans",
          "operationId": "listPlans",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "sort",
              "in": "query",
              "type": "string",
              "description": "coma separated list of keys sort keys"
            },
            {
              "name": "limit",
              "in": "query",
              "type": "integer",
              "description": "page size of items"
            },
            {
              "name": "offset",
              "in": "query",
              "type": "integer",
              "description": "number of pages to skip"
            },
            {
              "name": "scheduled",
              "in": "query",
              "type": "integer",
              "description": "whether to show manual or auto backups"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/listPlanResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            },
            "500": {
              "description": "Unable to list plans",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/plans/{plan_id}": {
        "get": {
          "tags": [
            "plans"
          ],
          "summary": "Show plan",
          "operationId": "getPlan",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "plan_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of specific plan"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/planResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters."
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            },
            "404": {
              "description": "Provided plan id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to get plan",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "put": {
          "tags": [
            "plans"
          ],
          "summary": "Updates a specific plan",
          "operationId": "putPlan",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "plan_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of specific plan"
            },
            {
              "name": "plan",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/putPlanRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/planResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "404": {
              "description": "Provided plan id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to update plan",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "plans"
          ],
          "summary": "Deletes a specific plan",
          "operationId": "deletePlan",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "plan_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of specific plan"
            }
          ],
          "responses": {
            "204": {
              "description": "OK"
            },
            "400": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "404": {
              "description": "Provided plan id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to delete plan",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/triggers": {
        "post": {
          "tags": [
            "triggers"
          ],
          "summary": "create a trigger",
          "operationId": "postTrigger",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "trigger",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/triggerRequest"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/triggerResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "404": {
              "description": "Provided plan id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to create trigger",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "get": {
          "tags": [
            "triggers"
          ],
          "summary": "list triggers",
          "operationId": "listTriggers",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "sort",
              "in": "query",
              "type": "string",
              "description": "coma separated list of keys sort keys"
            },
            {
              "name": "limit",
              "in": "query",
              "type": "integer",
              "description": "page size of items"
            },
            {
              "name": "offset",
              "in": "query",
              "type": "integer",
              "description": "offset of page"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/listTriggersResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to get trigger",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/triggers/{trigger_id}": {
        "get": {
          "tags": [
            "triggers"
          ],
          "summary": "get trigger",
          "operationId": "getTrigger",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "trigger_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of trigger"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/triggerResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "404": {
              "description": "Provided trigger id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to get trigger",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "put": {
          "tags": [
            "triggers"
          ],
          "summary": "update a trigger",
          "operationId": "putTrigger",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "trigger_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of trigger"
            },
            {
              "name": "trigger",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/updateTriggerRequest"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/triggerResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "404": {
              "description": "Provided trigger id not found",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unable to update trigger",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/providers/{provider_id}/checkpoints": {
        "post": {
          "tags": [
            "checkpoints"
          ],
          "summary": "create a checkpoint",
          "operationId": "postCheckpoint",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "format": "uuid",
              "type": "string",
              "required": true,
              "description": "id of provider"
            },
            {
              "name": "checkpoint",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/checkpointRequestObject"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/checkpointResponseObject"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "get": {
          "tags": [
            "checkpoints"
          ],
          "summary": "list checkpoints",
          "operationId": "listCheckpoints",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of provider"
            },
            {
              "name": "plan_id",
              "in": "query",
              "type": "string",
              "description": "filter checkpoints by plan id"
            },
            {
              "name": "sort",
              "in": "query",
              "type": "string",
              "description": "coma separated list of keys sort keys"
            },
            {
              "name": "limit",
              "in": "query",
              "type": "integer",
              "description": "page size of items"
            },
            {
              "name": "offset",
              "in": "query",
              "type": "integer",
              "description": "number of pages to skip"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/listCheckpointsResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/providers/{provider_id}/checkpoints/{checkpoint_id}": {
        "get": {
          "tags": [
            "checkpoints"
          ],
          "summary": "get checkpoint",
          "operationId": "getCheckpoint",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of provider"
            },
            {
              "name": "checkpoint_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of checkpoint"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/checkpointResponseObject"
              }
            },
            "404": {
              "description": "Checkpoint not found.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "checkpoints"
          ],
          "summary": "Deletes a specific checkpoint",
          "operationId": "deleteCheckpoint",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of provider"
            },
            {
              "name": "checkpoint_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of checkpoint"
            }
          ],
          "responses": {
            "204": {
              "description": "OK"
            },
            "404": {
              "description": "Chekpoint not found.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/providers/{provider_id}/checkpoints/{checkpoint_id}/resource_metadata/{resource_id}": {
        "get": {
          "tags": [
            "checkpoints"
          ],
          "summary": "get checkpoint metadata",
          "operationId": "getCheckpointMeta",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of provider"
            },
            {
              "name": "checkpoint_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of checkpoint"
            },
            {
              "name": "resource_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of resource"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/checkpointMetadataObject"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/restores": {
        "post": {
          "tags": [
            "restores"
          ],
          "summary": "create a restore",
          "operationId": "postRestore",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "restore",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/restoreApiObject"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/restoreApiObject"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "get": {
          "tags": [
            "restores"
          ],
          "summary": "list restores",
          "operationId": "listRestores",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "sort",
              "in": "query",
              "type": "string",
              "description": "coma separated list of keys sort keys"
            },
            {
              "name": "limit",
              "in": "query",
              "type": "integer",
              "description": "page size of items"
            },
            {
              "name": "offset",
              "in": "query",
              "type": "integer",
              "description": "number of pages to skip"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/listRestoreResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Internal error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/restores/{restore_id}": {
        "get": {
          "tags": [
            "restores"
          ],
          "summary": "get restore",
          "operationId": "getRestore",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "restore_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of restore"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/restoreApiObject"
              }
            },
            "404": {
              "description": "Restore not found.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "500": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/{project_id}/providers": {
        "get": {
          "tags": [
            "providers"
          ],
          "summary": "list providers",
          "operationId": "listProviders",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "sort",
              "in": "query",
              "type": "string",
              "description": "coma separated list of keys sort keys"
            },
            {
              "name": "limit",
              "in": "query",
              "type": "string",
              "description": "page size of items"
            },
            {
              "name": "marker",
              "in": "query",
              "type": "string",
              "description": "id of last-seen item"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/providerListResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters."
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            }
          }
        }
      },
      "/{project_id}/providers/{provider_id}": {
        "get": {
          "tags": [
            "providers"
          ],
          "summary": "get provider info",
          "operationId": "getProvider",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "type of provider"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/providerResponse"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            }
          }
        }
      },
      "/{project_id}/resources/{provider_id}/in-use": {
        "get": {
          "tags": [
            "resources"
          ],
          "summary": "get protecting or restorinng resource list",
          "operationId": "getInUseResources",
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "id of project"
            },
            {
              "name": "provider_id",
              "in": "path",
              "type": "string",
              "format": "uuid",
              "required": true,
              "description": "type of provider"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/InUseResources"
              }
            },
            "400": {
              "description": "Unacceptable parameters.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            },
            "401": {
              "description": "User must authenticate before making a request."
            },
            "403": {
              "description": "Policy does not allow current user to do this operation."
            },
            "500": {
              "description": "Unable to fetch in-use resources",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/_info": {
        "get": {
          "tags": [
            "info"
          ],
          "summary": "get server internal info",
          "operationId": "getServerInfo",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/infoResponse"
              }
            },
            "403": {
              "description": "Policy does not allow current user to do this operation.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "resources": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "properties": {
              "availability_zone": {
                "type": "string"
              },
              "destination": {
                "type": "string"
              },
              "volume_type": {
                "type": "string"
              },
              "restore_keypair": {
                "type": "string"
              },
              "datastore": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "checkpointResources": {
        "type": "object",
        "properties": {
          "original_id": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "parent_id": {
            "type": "string",
            "x-nullable": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "planParameters": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "planStatusObject": {
        "type": "string",
        "enum": [
          "running",
          "suspended",
          "deleted"
        ]
      },
      "shortPlanObject": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/definitions/planStatusObject"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "full_day": {
            "type": "integer",
            "x-nullable": true,
            "maximum": 6,
            "minimum": 0
          },
          "retention_type": {
            "type": "string",
            "enum": [
              "max_backups",
              "gfs"
            ]
          },
          "gfs": {
            "$ref": "#/definitions/gfsRequest"
          },
          "resources": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/definitions/resources"
            }
          }
        }
      },
      "planObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/resources"
            }
          },
          "provider_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/planStatusObject"
          },
          "parameters": {
            "$ref": "#/definitions/planParameters"
          },
          "description": {
            "type": "string"
          },
          "operations_enabled_by_default": {
            "type": "boolean"
          },
          "full_day": {
            "type": "integer"
          },
          "retention_type": {
            "type": "string",
            "enum": [
              "max_backups",
              "gfs"
            ]
          },
          "gfs": {
            "$ref": "#/definitions/gfsResponse"
          }
        },
        "required": [
          "parameters",
          "name",
          "id",
          "resources",
          "full_day"
        ]
      },
      "putPlanRequest": {
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/definitions/shortPlanObject"
          }
        }
      },
      "postPlanRequest": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/resources"
                }
              },
              "provider_id": {
                "type": "string"
              },
              "parameters": {
                "$ref": "#/definitions/planParameters"
              },
              "full_day": {
                "type": "integer",
                "x-nullable": true,
                "maximum": 6,
                "minimum": 0
              },
              "retention_type": {
                "type": "string",
                "enum": [
                  "max_backups",
                  "gfs"
                ]
              },
              "gfs": {
                "$ref": "#/definitions/gfsRequest"
              }
            },
            "required": [
              "name",
              "resources",
              "provider_id"
            ]
          }
        }
      },
      "planResponse": {
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/definitions/planObject"
          }
        }
      },
      "listPlanResponse": {
        "type": "object",
        "properties": {
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/planObject"
            }
          }
        }
      },
      "listTriggersResponse": {
        "type": "object",
        "properties": {
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/triggerObject"
            }
          }
        }
      },
      "triggerResponse": {
        "type": "object",
        "properties": {
          "trigger_info": {
            "$ref": "#/definitions/triggerObject"
          }
        }
      },
      "triggerRequest": {
        "type": "object",
        "properties": {
          "trigger_info": {
            "$ref": "#/definitions/shortTriggerObject"
          }
        }
      },
      "updateTriggerRequest": {
        "type": "object",
        "properties": {
          "trigger_info": {
            "type": "object",
            "properties": {
              "max_backups": {
                "type": "integer",
                "maximum": 200,
                "minimum": 1
              },
              "pattern": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "minLength": 3,
                "maxLength": 100
              }
            }
          }
        },
        "required": [
          "trigger_info"
        ]
      },
      "shortTriggerObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "plan_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/definitions/triggerProperties"
          }
        },
        "required": [
          "name",
          "properties",
          "plan_id"
        ]
      },
      "triggerObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "plan_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/definitions/triggerProperties"
          },
          "project_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "plan_id",
          "properties",
          "project_id"
        ]
      },
      "triggerProperties": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string"
          },
          "max_backups": {
            "type": "integer",
            "maximum": 200,
            "minimum": 1
          },
          "next_time": {
            "type": "integer"
          }
        },
        "required": [
          "pattern"
        ]
      },
      "gfsRequest": {
        "type": "object",
        "properties": {
          "grandfather": {
            "type": "integer",
            "maximum": 10,
            "minimum": 0,
            "x-nullable": false
          },
          "father": {
            "type": "integer",
            "maximum": 120,
            "minimum": 0,
            "x-nullable": false
          },
          "son": {
            "type": "integer",
            "maximum": 53,
            "minimum": 1,
            "x-nullable": false
          }
        },
        "required": [
          "son"
        ]
      },
      "gfsResponse": {
        "type": "object",
        "properties": {
          "grandfather": {
            "type": "integer",
            "maximum": 10,
            "minimum": 0,
            "x-nullable": false
          },
          "father": {
            "type": "integer",
            "maximum": 120,
            "minimum": 0,
            "x-nullable": false
          },
          "son": {
            "type": "integer",
            "maximum": 53,
            "minimum": 1,
            "x-nullable": false
          }
        },
        "required": [
          "grandfather",
          "father",
          "son"
        ]
      },
      "listCheckpointsResponse": {
        "type": "object",
        "properties": {
          "checkpoints": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/checkpointObject"
            }
          }
        }
      },
      "checkpointStatus": {
        "type": "string",
        "enum": [
          "error",
          "protecting",
          "available",
          "deleting",
          "deleted",
          "error-deleting",
          "new",
          "restoring"
        ]
      },
      "checkpointRequestObject": {
        "type": "object",
        "properties": {
          "checkpoint": {
            "$ref": "#/definitions/checkpointShortObject"
          }
        },
        "required": [
          "checkpoint"
        ]
      },
      "checkpointResponseObject": {
        "type": "object",
        "properties": {
          "checkpoint": {
            "$ref": "#/definitions/checkpointObject"
          }
        }
      },
      "checkpointMetadataObject": {
        "type": "object",
        "properties": {
          "resource_metadata": {
            "type": "object",
            "properties": {
              "server_metadata": {
                "$ref": "#/definitions/checkpointServerMetadata"
              },
              "boot_metadata": {
                "$ref": "#/definitions/checkpointBootMetadata"
              },
              "attach_metadata": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/bootAttachMetadata"
                }
              },
              "database_metadata": {
                "$ref": "#/definitions/databaseMetadata"
              }
            }
          }
        }
      },
      "databaseMetadata": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "string"
          },
          "datastore": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "flavor": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "checkpointServerMetadata": {
        "type": "object",
        "properties": {
          "availability_zone": {
            "type": "string"
          },
          "key_name": {
            "type": "string"
          },
          "floating_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "flavor": {
            "type": "string"
          },
          "networks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "security_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "bootAttachMetadata": {
        "type": "object",
        "properties": {
          "volume_image_metadata": {
            "type": "object",
            "properties": {
              "os_distro": {
                "type": "string"
              },
              "os_require_quiesce": {
                "type": "string"
              },
              "image_id": {
                "type": "string"
              },
              "container_format": {
                "type": "string"
              },
              "hw_qemu_guest_agent": {
                "type": "string"
              },
              "disk_format": {
                "type": "string"
              },
              "os_admin_user": {
                "type": "string"
              },
              "image_name": {
                "type": "string"
              },
              "os_version": {
                "type": "string"
              },
              "hw_boot_menu": {
                "type": "string"
              },
              "hw_rng_model": {
                "type": "string"
              },
              "min_disk": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "min_ram": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "server_id": {
            "type": "string"
          },
          "attachment_id": {
            "type": "string"
          },
          "availability_zone": {
            "type": "string"
          },
          "bootable": {
            "type": "string"
          },
          "attached_at": {
            "type": "string"
          },
          "volume_type": {
            "type": "string"
          },
          "volume_type_id": {
            "type": "string"
          },
          "host_name": {
            "type": "string"
          },
          "volume_id": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "checkpointBootMetadata": {
        "type": "object",
        "properties": {
          "boot_attach_metadata": {
            "$ref": "#/definitions/bootAttachMetadata"
          },
          "boot_volume_id": {
            "type": "string"
          },
          "boot_device_type": {
            "type": "string"
          }
        }
      },
      "checkpointShortObject": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "plan_id"
        ]
      },
      "checkpointObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/checkpointStatus"
          },
          "protection_plan": {
            "type": "object",
            "$ref": "#/definitions/checkpointPlanObject"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/checkpointResources"
            }
          },
          "size": {
            "type": "integer"
          },
          "timestamp": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "link_id": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "external_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "timestamp",
          "status",
          "size",
          "protection_plan",
          "created_at"
        ]
      },
      "checkpointPlanObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/resources"
            }
          },
          "provider_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "resources"
        ]
      },
      "restoreApiObject": {
        "type": "object",
        "properties": {
          "restore": {
            "$ref": "#/definitions/restoreObject"
          }
        }
      },
      "listRestoreResponse": {
        "type": "object",
        "properties": {
          "restores": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/restoreObject"
            }
          }
        }
      },
      "restoreObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "checkpoint_id": {
            "type": "string"
          },
          "restore_auth": {
            "$ref": "#/definitions/restoreAuthObject"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/restoreParameters"
            }
          },
          "resources_reason": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resources_status": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "provider_id",
          "checkpoint_id",
          "parameters"
        ]
      },
      "restoreParameters": {
        "type": "object",
        "properties": {
          "restore_name": {
            "type": "string"
          },
          "restore_keypair": {
            "type": "string"
          },
          "availability_zone": {
            "type": "string"
          },
          "restore_net_id": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "volume_type": {
            "type": "string"
          },
          "enable_fip": {
            "type": "boolean"
          },
          "enable_geo_replication": {
            "type": "boolean"
          },
          "flavor": {
            "type": "string"
          }
        },
        "required": [
          "restore_name"
        ]
      },
      "restoreAuthObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "providerResponse": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/definitions/providerObject"
          }
        }
      },
      "providerListResponse": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/providerObject"
            }
          }
        }
      },
      "providerObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "extended_info_schema": {
            "$ref": "#/definitions/extendedInfoSchema"
          },
          "saved_info_schema": {
            "$ref": "#/definitions/savedInfoSchema"
          },
          "restore_schema": {
            "$ref": "#/definitions/restoreSchema"
          }
        }
      },
      "extendedInfoSchema": {
        "type": "object",
        "properties": {
          "option_schema": {
            "type": "object",
            "properties": {
              "resource_uuid": {
                "type": "object",
                "properties": {
                  "required": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "backup_mode": {
                        "type": "object",
                        "properties": {
                          "default": {
                            "type": "string"
                          },
                          "enum": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "savedInfoSchema": {
        "type": "object",
        "properties": {
          "resource_uuid": {
            "type": "object",
            "properties": {
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string"
              },
              "properties": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "title": {
                "type": "string"
              }
            }
          }
        }
      },
      "restoreSchema": {
        "type": "object",
        "properties": {
          "resource_uuid": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "properties": {
                "type": "object",
                "properties": {
                  "restore_name": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "title": {
                "type": "string"
              }
            }
          }
        }
      },
      "InUseResources": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/InUseResource"
            }
          }
        }
      },
      "InUseResource": {
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "protecting",
              "restoring"
            ]
          }
        }
      },
      "infoResponse": {
        "type": "object",
        "properties": {
          "commit_sha": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          }
        }
      }
    }
  }