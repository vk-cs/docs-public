{
  "basePath": "/v1",
  "definitions": {
    "agentBaseObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "config_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "devices": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "token": {
          "example": "agent_token",
          "type": "string"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "token",
        "type_id",
        "tag_id",
        "devices",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "agentDeviceObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent",
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "token": {
          "example": "agent_token",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/agentTypeObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "token",
        "type",
        "tag",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "agentObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "config_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "devices": {
          "items": {
            "$ref": "#/definitions/deviceAgentObject"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "token": {
          "example": "agent_token",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/agentTypeObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "token",
        "type",
        "tag",
        "devices",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "agentTypeBaseObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "drivers": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi agent type",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "drivers",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "agentTypeObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "drivers": {
          "items": {
            "$ref": "#/definitions/driverObject"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi agent type",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "drivers",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "aggregatesOperationObject": {
      "properties": {
        "id": {
          "example": "sum",
          "type": "string"
        },
        "name": {
          "example": "Сумма",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "aggregatesPeriodObject": {
      "properties": {
        "id": {
          "example": "10m",
          "type": "string"
        },
        "name": {
          "example": "10 минут",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "basicRuleConstant": {
      "properties": {
        "label": {
          "example": "Constant 1",
          "type": "string"
        },
        "name": {
          "example": "min-threshhold",
          "type": "string"
        },
        "type": {
          "example": "number",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRuleObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "tag_type": {
          "enum": [
            "event",
            "state"
          ],
          "example": "event",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer",
          "x-nullable": true
        },
        "value_type": {
          "example": "number",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "value_type",
        "tag_type",
        "enabled",
        "created_at",
        "updated_at",
        "client_id"
      ],
      "type": "object"
    },
    "basicRuleObjectExtendedFields": {
      "properties": {
        "actions": {
          "example": "[{\"type\":\"op_store\",\"properties\":{\"operation\":\"save\",\"args\":{\"tag_id\":{\"source\":\"context\",\"properties\":{\"path\":[\"tag\",\"id\"]}}}}}]",
          "type": "string"
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "condition": {
          "example": "{\"type\":\"cond_op\",\"properties\":{\"op\":\"GE\",\"args\":{\"a\":{\"type\":\"arg\",\"properties\":{\"type\":\"context\",\"payload\":{\"path\":[\"msg\",\"value\"]}}}}}}",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "tag_type": {
          "enum": [
            "event",
            "state"
          ],
          "example": "event",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value_type": {
          "example": "number",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "condition",
        "actions",
        "value_type",
        "tag_type",
        "enabled",
        "created_at",
        "updated_at",
        "client_id"
      ],
      "type": "object"
    },
    "basicRulesAction": {
      "properties": {
        "json": {
          "type": "string"
        },
        "label": {
          "example": "Save into operational storage",
          "type": "string"
        },
        "name": {
          "example": "op_store",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesAggregateOperations": {
      "properties": {
        "label": {
          "example": "Average",
          "type": "string"
        },
        "name": {
          "example": "avg",
          "type": "string"
        },
        "type": {
          "example": "number",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesAggregatePeriods": {
      "properties": {
        "label": {
          "example": "Last 5 minutes",
          "type": "string"
        },
        "name": {
          "example": "last_5m",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesArgument": {
      "properties": {
        "label": {
          "example": "Specified value",
          "type": "string"
        },
        "name": {
          "example": "value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesConditionalOperators": {
      "properties": {
        "args": {
          "description": "Non typed dictionary",
          "example": {
            "a": {
              "allowed_types": [
                "value",
                "context",
                "constant",
                "aggregate",
                "last_value"
              ],
              "allowed_value_types": [
                "number",
                "string",
                "boolean",
                "timestamp"
              ],
              "label": "Первый аргумент"
            }
          },
          "type": "object"
        },
        "label": {
          "example": "Not NULL",
          "type": "string"
        },
        "operator": {
          "example": "NOT NULL",
          "type": "string"
        },
        "same_type": {
          "description": "Should all arguments have the same type",
          "example": true,
          "type": "boolean"
        },
        "template": {
          "example": [
            "${a}",
            "not NULL"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "basicRulesPathField": {
      "properties": {
        "label": {
          "example": "Тэг",
          "type": "string"
        },
        "name": {
          "example": "tag",
          "type": "string"
        },
        "type": {
          "example": "object",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesPathSource": {
      "properties": {
        "label": {
          "example": "Context",
          "type": "string"
        },
        "name": {
          "example": "context",
          "type": "string"
        }
      },
      "type": "object"
    },
    "basicRulesTagType": {
      "properties": {
        "label": {
          "example": "Event",
          "type": "string"
        },
        "name": {
          "example": "event",
          "type": "string"
        }
      },
      "type": "object"
    },
    "clientBaseObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "some_name",
          "type": "string"
        },
        "reason": {
          "example": "Failed to execute task",
          "type": "string",
          "x-nullable": true
        },
        "state": {
          "enum": [
            "ready",
            "creating",
            "create_failed",
            "setup_auth",
            "setup_topics",
            "setup_components",
            "deleting",
            "delete_failed",
            "clear_auth",
            "clear_components",
            "clear_topics"
          ],
          "example": "new",
          "type": "string"
        },
        "status": {
          "enum": [
            "active",
            "frozen"
          ],
          "example": "active",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "state",
        "status",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "clientObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "some_name",
          "type": "string"
        },
        "reason": {
          "example": "Failed to execute task",
          "type": "string",
          "x-nullable": true
        },
        "root_tag": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "client_name",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "state": {
          "enum": [
            "ready",
            "creating",
            "create_failed",
            "setup_auth",
            "setup_topics",
            "setup_components",
            "deleting",
            "delete_failed",
            "clear_auth",
            "clear_components",
            "clear_topics"
          ],
          "example": "new",
          "type": "string"
        },
        "status": {
          "enum": [
            "active",
            "frozen"
          ],
          "example": "active",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "root_tag",
        "state",
        "status",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "cloneDeviceType": {
      "properties": {
        "label": {
          "example": "Raspberry",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "configGroupObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "polling_interval_duration",
          "type": "string"
        },
        "parameters": {
          "items": {
            "$ref": "#/definitions/configParameterObject"
          },
          "type": "array",
          "x-nullable": false
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "type_id",
        "parameters"
      ],
      "type": "object"
    },
    "configParameterObject": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "sensor_request_frequency_duration",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "value_type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "required",
        "value_type_id"
      ],
      "type": "object"
    },
    "connectorFieldTypeObject": {
      "properties": {
        "description": {
          "example": "This is integer field.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "integer",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "connectorObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "config": {
          "type": "object"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "description": {
          "example": "This is connector for Postgres database.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "mylabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "postgres",
          "type": "string"
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "postgres",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "config",
        "type",
        "client_id",
        "created_at"
      ],
      "type": "object"
    },
    "connectorTypeObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "description": {
          "example": "This is connector for Clickhouse database.",
          "type": "string",
          "x-nullable": true
        },
        "fields": {
          "items": {
            "properties": {
              "description": {
                "example": "Connection url string for database.",
                "type": "string"
              },
              "name": {
                "example": "url",
                "type": "string"
              },
              "required": {
                "example": true,
                "type": "boolean"
              },
              "type": {
                "$ref": "#/definitions/connectorFieldTypeObject"
              }
            },
            "required": [
              "name",
              "type",
              "required",
              "description"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "clickhouse",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "fields",
        "created_at"
      ],
      "type": "object"
    },
    "constantObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "mylabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "constant",
          "type": "string"
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "integer",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "value": {
          "example": "5",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type",
        "value",
        "client_id",
        "created_at"
      ],
      "type": "object"
    },
    "constantsTypeObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "integer",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "createAgent": {
      "properties": {
        "devices": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "maxItems": 100,
          "type": "array"
        },
        "label": {
          "example": "Raspberry Agent",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "properties": {
            "label": {
              "example": "My Raspberry Agent",
              "pattern": "^.{2,200}$",
              "type": "string"
            },
            "name": {
              "example": "my_raspberrypi_agent",
              "pattern": "^[A-Za-z0-9_.]{2,50}$",
              "type": "string"
            }
          },
          "required": [
            "name",
            "label"
          ],
          "type": "object"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "label",
        "type_id",
        "devices",
        "tag"
      ],
      "type": "object"
    },
    "createAgentType": {
      "properties": {
        "drivers": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent_type",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        }
      },
      "required": [
        "name",
        "label",
        "drivers"
      ],
      "type": "object"
    },
    "createBasicRule": {
      "properties": {
        "actions": {
          "example": "[{\"type\":\"op_store\",\"properties\":{\"operation\":\"save\",\"args\":{\"tag_id\":{\"source\":\"context\",\"properties\":{\"path\":[\"tag\",\"id\"]}}}}}]",
          "type": "string"
        },
        "condition": {
          "example": "{\"type\":\"cond_op\",\"properties\":{\"op\":\"GE\",\"args\":{\"a\":{\"type\":\"arg\",\"properties\":{\"type\":\"context\",\"payload\":{\"path\":[\"msg\",\"value\"]}}}}}}",
          "type": "string"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "rule_name",
          "pattern": "^[A-Za-z0-9_.]{2,200}$",
          "type": "string"
        },
        "tag_type": {
          "enum": [
            "event",
            "state"
          ],
          "example": "event",
          "type": "string"
        },
        "value_type": {
          "enum": [
            "number",
            "boolean",
            "string",
            "timestamp"
          ],
          "example": "number",
          "type": "string"
        }
      },
      "required": [
        "name",
        "label",
        "condition",
        "actions",
        "value_type",
        "tag_type",
        "enabled"
      ],
      "type": "object"
    },
    "createClient": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "client_name",
          "pattern": "^[a-z0-9]{2,50}$",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "createConfigGroup": {
      "properties": {
        "name": {
          "example": "polling_interval_duration",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "parameters": {
          "items": {
            "$ref": "#/definitions/createConfigParameter"
          },
          "type": "array"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "type_id",
        "parameters"
      ],
      "type": "object"
    },
    "createConfigParameter": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "sensor_request_frequency_duration",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "value_type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "required",
        "value_type_id"
      ],
      "type": "object"
    },
    "createDevice": {
      "properties": {
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object"
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object"
        },
        "label": {
          "example": "Raspberry Device",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_device",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "properties": {
            "driver_config": {
              "description": "Non typed dictionary for driver settings",
              "example": "{\"key\": \"value\"}",
              "type": "object"
            },
            "label": {
              "example": "My Raspberry Device",
              "pattern": "^.{2,200}$",
              "type": "string"
            },
            "name": {
              "example": "my_raspberrypi_device",
              "pattern": "^[A-Za-z0-9_.]{2,50}$",
              "type": "string"
            },
            "parent_id": {
              "example": 1,
              "type": "integer"
            }
          },
          "required": [
            "parent_id",
            "name",
            "label"
          ],
          "type": "object"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "label",
        "type_id",
        "tag"
      ],
      "type": "object"
    },
    "createDeviceConfigTemplate": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "ipv4",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "value_type_id": {
          "example": 5,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "value_type_id",
        "required"
      ],
      "type": "object"
    },
    "createDeviceType": {
      "properties": {
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "device_config_template": {
          "items": {
            "$ref": "#/definitions/createDeviceConfigTemplate"
          },
          "type": "array",
          "x-nullable": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "driver_id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag_template": {
          "$ref": "#/definitions/createRootTagTemplate"
        }
      },
      "required": [
        "name",
        "driver_id",
        "tag_template"
      ],
      "type": "object"
    },
    "createDriver": {
      "properties": {
        "config_template": {
          "items": {
            "$ref": "#/definitions/createDriverConfigTemplate"
          },
          "type": "array"
        },
        "label": {
          "example": "Modbus Driver",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "modbus driver",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string"
        },
        "protocol": {
          "example": "modbus",
          "type": "string"
        }
      },
      "required": [
        "name",
        "label",
        "protocol",
        "config_template"
      ],
      "type": "object"
    },
    "createDriverConfigTemplate": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "ipv4",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "tag_type_id": {
          "example": 4,
          "type": "integer"
        },
        "value_type_id": {
          "example": 5,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "tag_type_id",
        "value_type_id",
        "required"
      ],
      "type": "object"
    },
    "createRootTagTemplate": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/createTagTemplate"
          },
          "type": "array"
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "properties": {
          "type": "object"
        },
        "rules": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "properties",
        "children"
      ],
      "type": "object"
    },
    "createRule": {
      "properties": {
        "code": {
          "example": "save(event)",
          "maxLength": 8000,
          "type": "string"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "lang_id": {
          "example": 0,
          "type": "integer"
        },
        "name": {
          "example": "rule name",
          "pattern": "^[A-Za-z0-9_. ]{2,200}$",
          "type": "string"
        },
        "type": {
          "example": 0,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "code",
        "enabled",
        "lang_id",
        "type",
        "label"
      ],
      "type": "object"
    },
    "createTag": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "basic_rules": {
          "items": {
            "properties": {
              "id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "label": {
          "example": "Tag",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "tag",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "type": "string"
        },
        "prev_id": {
          "example": 1,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "properties": {
              "id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "label",
        "prev_id",
        "properties",
        "type_id",
        "rules",
        "basic_rules"
      ],
      "type": "object"
    },
    "createTagTemplate": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/createTagTemplate"
          },
          "type": "array",
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "label": {
          "example": "Temperature",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "temperature",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array",
          "x-omitempty": true
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "label",
        "type_id",
        "properties"
      ],
      "type": "object"
    },
    "deviceAgentObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_config_id": {
          "description": "Device configuration version ID",
          "example": 1,
          "type": "integer"
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings. Deprecated, get config via handler by device_config_id instead",
          "example": "{\"key\": \"value\"}",
          "type": "object"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Device",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_device",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "type": {
          "$ref": "#/definitions/deviceTypeObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type",
        "tag",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "deviceBaseObject": {
      "properties": {
        "agent_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Device",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_device",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "type_id": {
          "example": 1,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type_id",
        "tag_id",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "deviceConfigTemplateObject": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "ipv4",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "value_type_id": {
          "example": 5,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "value_type_id",
        "required"
      ],
      "type": "object"
    },
    "deviceConfigVersionObject": {
      "properties": {
        "created_at": {
          "description": "Creation timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "device_id": {
          "example": 1,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "device_id"
      ],
      "type": "object"
    },
    "deviceObject": {
      "properties": {
        "agent": {
          "$ref": "#/definitions/agentDeviceObject"
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_config_id": {
          "description": "Device configuration version ID",
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Device",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_device",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "type": {
          "$ref": "#/definitions/deviceTypeObject"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type",
        "tag",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "deviceTypeObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "device_config_template": {
          "items": {
            "$ref": "#/definitions/deviceConfigTemplateObject"
          },
          "type": "array",
          "x-nullable": true
        },
        "driver": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "embedded",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi",
          "type": "string"
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag_template": {
          "$ref": "#/definitions/rootTagTemplate"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "driver",
        "tag_template",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "driverConfigTemplateObject": {
      "properties": {
        "default_value": {
          "example": "127.0.0.1",
          "x-nullable": true
        },
        "name": {
          "example": "ipv4",
          "type": "string"
        },
        "required": {
          "example": true,
          "type": "boolean"
        },
        "tag_type_id": {
          "example": 4,
          "type": "integer"
        },
        "value_type_id": {
          "example": 5,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "tag_type_id",
        "value_type_id",
        "required"
      ],
      "type": "object"
    },
    "driverObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "config_template": {
          "items": {
            "$ref": "#/definitions/driverConfigTemplateObject"
          },
          "type": "array",
          "x-nullable": true
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Modbus Driver",
          "type": "string"
        },
        "name": {
          "example": "modbus_driver",
          "type": "string"
        },
        "protocol": {
          "example": "modbus",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "protocol",
        "client_id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "errorResponse": {
      "properties": {
        "code": {
          "example": 300,
          "type": "integer"
        },
        "message": {
          "example": "Something bad happens.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "exporterFieldTypeObject": {
      "properties": {
        "description": {
          "example": "This is integer field.",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "integer",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ],
      "type": "object"
    },
    "exporterObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "config": {
          "type": "object"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "description": {
          "example": "This is exporter into Telemedecine Postgres database.",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "mylabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "name": {
          "example": "telemedicine postgres",
          "type": "string"
        },
        "topic": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "tm_export_postgres",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "postgres",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "description",
        "config",
        "topic",
        "type",
        "client_id",
        "created_at"
      ],
      "type": "object"
    },
    "exporterTypeObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "description": {
          "example": "This is exporter into Clickhouse database.",
          "type": "string"
        },
        "fields": {
          "items": {
            "properties": {
              "description": {
                "example": "Connection url string for database.",
                "type": "string"
              },
              "name": {
                "example": "url",
                "type": "string"
              },
              "required": {
                "example": true,
                "type": "boolean"
              },
              "type": {
                "$ref": "#/definitions/exporterFieldTypeObject"
              }
            },
            "required": [
              "name",
              "type",
              "required",
              "description"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "clickhouse",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "fields",
        "created_at"
      ],
      "type": "object"
    },
    "patchAgent": {
      "properties": {
        "devices": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "maxItems": 100,
          "type": "array",
          "x-nullable": true
        },
        "label": {
          "example": "Raspberry Agent",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        }
      },
      "type": "object"
    },
    "patchAgentType": {
      "properties": {
        "drivers": {
          "items": {
            "example": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "raspberrypi_agent_type",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string",
          "x-nullable": true
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        }
      },
      "type": "object"
    },
    "patchConfigGroup": {
      "properties": {
        "name": {
          "example": "polling_interval_duration",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string",
          "x-nullable": true
        },
        "parameters": {
          "items": {
            "$ref": "#/definitions/createConfigParameter"
          },
          "type": "array",
          "x-nullable": true
        },
        "type_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "patchDevice": {
      "properties": {
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "label": {
          "example": "Raspberry Device",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "raspberrypi_device",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string",
          "x-nullable": true
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag": {
          "properties": {
            "driver_config": {
              "description": "Non typed dictionary for driver settings",
              "example": "{\"key\": \"value\"}",
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "patchDeviceType": {
      "properties": {
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "device_config_template": {
          "items": {
            "$ref": "#/definitions/createDeviceConfigTemplate"
          },
          "type": "array",
          "x-nullable": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "driver_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "label": {
          "example": "Raspberry",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "raspberrypi",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string",
          "x-nullable": true
        },
        "status_management": {
          "$ref": "#/definitions/statusManagementObject"
        },
        "tag_template": {
          "$ref": "#/definitions/createRootTagTemplate"
        }
      },
      "type": "object"
    },
    "patchDriver": {
      "properties": {
        "label": {
          "example": "Modbus Driver",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "modbus driver",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "type": "string",
          "x-nullable": true
        },
        "protocol": {
          "example": "modbus",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "rootTagTemplate": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/tagTemplate"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "properties": {
          "type": "object"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        }
      },
      "required": [
        "properties"
      ],
      "type": "object"
    },
    "ruleObject": {
      "properties": {
        "code": {
          "example": "save(event)",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "lang": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "python",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "type": {
          "example": 0,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "code",
        "enabled",
        "lang",
        "type",
        "created_at",
        "updated_at",
        "label"
      ],
      "type": "object"
    },
    "ruleObjectExtendedFields": {
      "properties": {
        "client": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "some_name",
              "type": "string"
            },
            "root_tag": {
              "properties": {
                "id": {
                  "example": 1,
                  "type": "integer"
                },
                "name": {
                  "example": "client_name",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ],
              "type": "object"
            }
          },
          "required": [
            "id",
            "name",
            "root_tag"
          ],
          "type": "object"
        },
        "code": {
          "example": "save(event)",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "lang": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "python",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "type": {
          "example": 0,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "code",
        "enabled",
        "lang",
        "type",
        "created_at",
        "updated_at",
        "client",
        "label"
      ],
      "type": "object"
    },
    "ruleSchedulesObject": {
      "properties": {
        "code": {
          "example": "save(event)",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string"
        },
        "lang": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "python",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "schedules": {
          "items": {
            "$ref": "#/definitions/scheduleObject"
          },
          "type": "array"
        },
        "type": {
          "example": 0,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "code",
        "enabled",
        "lang",
        "type",
        "created_at",
        "updated_at",
        "label",
        "schedules"
      ],
      "type": "object"
    },
    "rulesLangObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "lua",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "rulesTypeObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "cron",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "scheduleObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "type": "string"
        },
        "name": {
          "example": "Every 30 minutes",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "example": "30 15 * * 2",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "value",
        "created_at"
      ],
      "type": "object"
    },
    "scheduleRulesObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "type": "string"
        },
        "name": {
          "example": "Every 30 minutes",
          "type": "string"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/ruleObject"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "example": "30 15 * * 2",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "value",
        "created_at",
        "rules"
      ],
      "type": "object"
    },
    "statusManagementObject": {
      "properties": {
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "timeout": {
          "example": "60m",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "tagBasicRuleObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "MyLabel",
          "type": "string"
        },
        "name": {
          "example": "tag rule",
          "type": "string"
        },
        "tag_type": {
          "example": 1,
          "type": "integer"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value_type": {
          "example": "number",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "value_type",
        "tag_type",
        "enabled",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "tagObject": {
      "properties": {
        "agent_id": {
          "description": "Exists if tag in agent tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "basic_rules": {
          "items": {
            "properties": {
              "id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_id": {
          "description": "Exists if tag in device tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "devices_count": {
          "description": "Exists if tag has type of 'undefined'.",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "full_name": {
          "example": "root/sub/leaf/tag",
          "type": "string"
        },
        "has_children": {
          "description": "Exists if tag has type of 'undefined'.",
          "example": true,
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Some Tag",
          "type": "string"
        },
        "name": {
          "example": "some_tag",
          "type": "string"
        },
        "prev_id": {
          "example": 0,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "prev_id",
        "properties",
        "type",
        "created_at",
        "updated_at",
        "client_id"
      ],
      "type": "object"
    },
    "tagObjectExtendedFields": {
      "properties": {
        "agent_id": {
          "description": "Exists if tag in agent tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "basic_rules": {
          "items": {
            "$ref": "#/definitions/tagBasicRuleObject"
          },
          "type": "array",
          "x-nullable": true
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_id": {
          "description": "Exists if tag in device tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "full_name": {
          "example": "root/sub/leaf/tag",
          "type": "string"
        },
        "has_children": {
          "description": "Exists if tag has type of 'undefined'.",
          "example": true,
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Some Tag",
          "type": "string"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "prev_id": {
          "example": 0,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "prev_id",
        "properties",
        "full_name",
        "type",
        "created_at",
        "updated_at",
        "client_id"
      ],
      "type": "object"
    },
    "tagPrivateObject": {
      "properties": {
        "agent_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "device_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagPrivateProperties"
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "id",
        "properties",
        "type"
      ],
      "type": "object"
    },
    "tagPrivateProperties": {
      "properties": {
        "value_type": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "example": "float",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "tagProperties": {
      "properties": {
        "aggregate": {
          "description": "Exists only when tag.type is aggregate",
          "properties": {
            "active": {
              "description": "Exists only when tag.type is aggregate",
              "example": true,
              "type": "boolean",
              "x-omitempty": false
            },
            "calc_offset_sec": {
              "description": "Exists only when tag.type is aggregate",
              "example": 15,
              "type": "integer"
            },
            "operation": {
              "description": "Exists only when tag.type is aggregate",
              "enum": [
                "sum",
                "min",
                "max",
                "avg",
                "count"
              ],
              "example": "min",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "period": {
              "description": "Exists only when tag.type is aggregate",
              "enum": [
                "1m",
                "2m",
                "3m",
                "5m",
                "10m",
                "15m",
                "30m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "8h",
                "12h",
                "1d",
                "1w",
                "1M",
                "2M",
                "3M",
                "4M",
                "1Q",
                "1S",
                "1H",
                "1Y",
                "weekdays",
                "weekend",
                "custom"
              ],
              "example": "1h",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "timezone": {
              "description": "As specified in OS time zone database, exists only when tag.type is aggregate",
              "example": "Europe/Moscow",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "update_active": {
              "default": false,
              "description": "Exists only when tag.type is aggregate",
              "example": true,
              "type": "boolean",
              "x-omitempty": false
            },
            "update_interval": {
              "description": "Exists only when tag.type is aggregate, empty string if update is not active",
              "enum": [
                "",
                "10m",
                "15m",
                "30m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "8h",
                "12h",
                "1d",
                "custom"
              ],
              "example": "1h",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            }
          },
          "required": [
            "active",
            "operation",
            "period",
            "calc_offset_sec"
          ],
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "autosave": {
          "description": "Exists only when tag.type is state or event",
          "properties": {
            "digital_twins": {
              "description": "Exists only when tag.type is state",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            },
            "long_term_storage": {
              "description": "Exists only when tag.type is event",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            },
            "operational_storage": {
              "description": "Exists only when tag.type is event",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            }
          },
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "readonly": {
          "description": "Exists only when tag.type is state",
          "example": true,
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "units": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "example": "C",
          "pattern": "^.{0,100}$",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "value_type": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "example": "float",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "tagRuleObject": {
      "properties": {
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "lang": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "python",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "metadata": {
          "properties": {
            "inheritance": {
              "example": false,
              "type": "boolean"
            },
            "tag": {
              "example": "some/tag",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "example": "tag rule",
          "type": "string"
        },
        "type": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "enabled",
        "lang",
        "type",
        "metadata"
      ],
      "type": "object"
    },
    "tagTemplate": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/tagTemplate"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "label": {
          "example": "Temperature",
          "type": "string"
        },
        "name": {
          "example": "temperature",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "name",
        "label",
        "type",
        "properties"
      ],
      "type": "object"
    },
    "tagWithSubtreeObject": {
      "properties": {
        "agent_id": {
          "description": "Exists if tag in agent tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "basic_rules": {
          "items": {
            "$ref": "#/definitions/tagBasicRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/tagWithSubtreeObject"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "device_id": {
          "description": "Exists if tag in device tags subtree",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "full_name": {
          "example": "root/sub/leaf/tag",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "some_label",
          "type": "string"
        },
        "name": {
          "example": "some_rule",
          "type": "string"
        },
        "prev_id": {
          "example": 0,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "prev_id",
        "properties",
        "full_name",
        "type",
        "children",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "tagsTreePathObject": {
      "properties": {
        "tags": {
          "items": {
            "$ref": "#/definitions/tagObject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tagsTypeObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "undefined",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "topicObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "exporter_id": {
          "description": "Exists only when topic.type is exporter",
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "some_topic",
          "type": "string"
        },
        "reason": {
          "example": "Failed to execute task",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "enum": [
            "ready",
            "creating",
            "create_failed",
            "deleting",
            "delete_failed"
          ],
          "type": "string"
        },
        "type": {
          "description": "Topic type",
          "enum": [
            "unused",
            "platform",
            "exporter"
          ],
          "example": "platform",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "status",
        "created_at",
        "client_id",
        "type"
      ],
      "type": "object"
    },
    "updateBasicRule": {
      "properties": {
        "actions": {
          "example": "[{\"type\":\"op_store\",\"properties\":{\"operation\":\"save\",\"args\":{\"tag_id\":{\"source\":\"context\",\"properties\":{\"path\":[\"tag\",\"id\"]}}}}}]",
          "type": "string",
          "x-nullable": true
        },
        "condition": {
          "example": "{\"type\":\"cond_op\",\"properties\":{\"op\":\"GE\",\"args\":{\"a\":{\"type\":\"arg\",\"properties\":{\"type\":\"context\",\"payload\":{\"path\":[\"msg\",\"value\"]}}}}}}",
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "rule name",
          "pattern": "^[A-Za-z0-9_.]{2,200}$",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "updateRule": {
      "properties": {
        "code": {
          "example": "save(event)",
          "maxLength": 8000,
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "label": {
          "example": "MyLabel",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "rule name",
          "pattern": "^[A-Za-z0-9_. ]{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "example": 0,
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "updateTag": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "basic_rules": {
          "items": {
            "properties": {
              "id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array",
          "x-nullable": true
        },
        "driver_config": {
          "description": "Non typed dictionary for driver settings",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true
        },
        "label": {
          "example": "Some Tag",
          "pattern": "^.{2,200}$",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "tag",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "type": "string",
          "x-nullable": true
        },
        "prev_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "properties": {
              "id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    }
  },
  "host": "localhost",
  "info": {
    "description": "HTTP API for COIIOT registry.",
    "title": "COIIOT Registry API",
    "version": "1.0.0"
  },
  "paths": {
    "/aggregates/operations": {
      "get": {
        "operationId": "getOperations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/aggregatesOperationObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregates operations",
        "tags": [
          "aggregates"
        ]
      }
    },
    "/aggregates/periods": {
      "get": {
        "operationId": "getPeriods",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/aggregatesPeriodObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregates periods",
        "tags": [
          "aggregates"
        ]
      }
    },
    "/aggregates/timezones": {
      "get": {
        "operationId": "getTimezones",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregates timezones",
        "tags": [
          "aggregates"
        ]
      }
    },
    "/aggregates/update_intervals": {
      "get": {
        "operationId": "getUpdateIntervals",
        "parameters": [
          {
            "description": "aggregate work period",
            "in": "query",
            "name": "period",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/aggregatesPeriodObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregates update intervals",
        "tags": [
          "aggregates"
        ]
      }
    },
    "/client_validators/name/unique": {
      "get": {
        "operationId": "validateClientName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if client's name is unique",
        "tags": [
          "clients"
        ]
      },
      "parameters": [
        {
          "description": "Client name",
          "in": "query",
          "name": "name",
          "pattern": "^[a-z0-9]{2,50}$",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/clients": {
      "get": {
        "operationId": "getClients",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/clientBaseObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get clients",
        "tags": [
          "clients"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createClient",
        "parameters": [
          {
            "description": "Client params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createClient"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create new client",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/{client_id}": {
      "delete": {
        "operationId": "deleteClient",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete client by id",
        "tags": [
          "clients"
        ]
      },
      "get": {
        "operationId": "getClient",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get client by id",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/{client_id}/agent_type_validators/name/unique": {
      "get": {
        "operationId": "validateAgentTypeName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the agent type name",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the agent type",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/agent_types": {
      "get": {
        "operationId": "getAgentTypes",
        "parameters": [
          {
            "description": "Filter by driver id",
            "in": "query",
            "name": "driver_id",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/agentTypeBaseObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent types",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createAgentType",
        "parameters": [
          {
            "description": "Agent type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createAgentType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create agent type",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/agent_types/{type_id}": {
      "delete": {
        "operationId": "deleteAgentType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete agent type",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getAgentType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent type",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Agent type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchAgentType",
        "parameters": [
          {
            "description": "Agent type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAgentType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch agent type",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/agent_validators/name/unique": {
      "get": {
        "operationId": "validateAgentName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the agent name",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the agent",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/agents": {
      "get": {
        "operationId": "getAgents",
        "parameters": [
          {
            "description": "Filter by type id",
            "in": "query",
            "name": "type_id",
            "type": "integer"
          },
          {
            "description": "Greater than specified time",
            "in": "query",
            "name": "updated_at",
            "type": "integer"
          },
          {
            "description": "Filter by driver id",
            "in": "query",
            "name": "driver_id",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/agentBaseObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agents",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createAgent",
        "parameters": [
          {
            "description": "Agent params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createAgent"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create agent",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/agents/{agent_id}": {
      "delete": {
        "operationId": "deleteAgent",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete agent",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getAgent",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchAgent",
        "parameters": [
          {
            "description": "Agent type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAgent"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch agent",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/agents/{agent_id}/tokens/regenerate": {
      "parameters": [
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "regenerateAgentToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Regenerate agent token",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/aggregates/operations/{operation_id}/value_types": {
      "get": {
        "operationId": "getOperationValueTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregates operation value types",
        "tags": [
          "aggregates"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Operation ID",
          "enum": [
            "avg",
            "min",
            "max",
            "sum",
            "count"
          ],
          "in": "path",
          "name": "operation_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "Value type of the parent tag",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "in": "query",
          "name": "parent_value_type",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/actions": {
      "get": {
        "operationId": "getBasicRulesActions",
        "parameters": [
          {
            "description": "Tag type",
            "enum": [
              "event",
              "state"
            ],
            "in": "query",
            "name": "tag_type",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesAction"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get actions",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments": {
      "get": {
        "operationId": "getBasicRulesArguments",
        "parameters": [
          {
            "description": "Tag type",
            "enum": [
              "event",
              "state"
            ],
            "in": "query",
            "name": "tag_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Conditional operator",
            "in": "query",
            "name": "operator",
            "required": true,
            "type": "string"
          },
          {
            "description": "Operator argument",
            "in": "query",
            "name": "argument",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesArgument"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get arguments",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments/aggregate/operations": {
      "get": {
        "operationId": "getBasicRulesAggregateOperations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesAggregateOperations"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregate operations",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Value type",
          "enum": [
            "number",
            "boolean",
            "string",
            "timestamp"
          ],
          "in": "query",
          "name": "value_type",
          "required": true,
          "type": "string"
        },
        {
          "default": "event",
          "description": "Tag type, default is event",
          "enum": [
            "event",
            "state"
          ],
          "in": "query",
          "name": "tag_type",
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments/aggregate/periods": {
      "get": {
        "operationId": "getBasicRulesAggregatePeriods",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesAggregatePeriods"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get aggregate periods",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments/context/tags/fields": {
      "get": {
        "operationId": "getBasicRulesContextTagsFields",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesPathField"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get context tags fields",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "default": "[]",
          "description": "Path example: [\"msg\"]\n",
          "in": "query",
          "name": "path",
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments/last_value/tag_id/sources": {
      "get": {
        "operationId": "getBasicRulesLastValueSources",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesPathSource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get last value sources",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/arguments/last_value/tag_id/sources/context/fields": {
      "get": {
        "operationId": "getBasicRulesLastValueContextFields",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesPathField"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get last value context fields",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "default": "[]",
          "description": "Path example: [\"msg\"]\n",
          "in": "query",
          "name": "path",
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/conditional_operators": {
      "get": {
        "operationId": "getBasicRulesConditionalOperators",
        "parameters": [
          {
            "default": "event",
            "description": "Tag type, default is event",
            "enum": [
              "event",
              "state"
            ],
            "in": "query",
            "name": "tag_type",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesConditionalOperators"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get conditional operators",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/constants": {
      "get": {
        "operationId": "getBasicRulesConstants",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/basicRuleConstant"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get constants",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/rules": {
      "get": {
        "operationId": "getBasicRules",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(name)",
              "desc(name)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/basicRuleObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get basic rules",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createBasicRule",
        "parameters": [
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createBasicRule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/basicRuleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create basic rule",
        "tags": [
          "basic_rules"
        ]
      }
    },
    "/clients/{client_id}/basic_processing/rules/{rule_id}": {
      "delete": {
        "operationId": "deleteBasicRule",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete rule",
        "tags": [
          "basic_rules"
        ]
      },
      "get": {
        "operationId": "getBasicRule",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/basicRuleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get basic rule",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Rule ID",
          "in": "path",
          "name": "rule_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateBasicRule",
        "parameters": [
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateBasicRule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/basicRuleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Update rule",
        "tags": [
          "basic_rules"
        ]
      }
    },
    "/clients/{client_id}/basic_processing/tag_types": {
      "get": {
        "operationId": "getBasicRulesTagTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/basicRulesTagType"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get available tag types for basic rules",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/validators/name/validate": {
      "get": {
        "operationId": "validateBasicRuleName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the basic rule name",
        "tags": [
          "basic_rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Name of the rule",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,200}$",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/basic_processing/validators/rule/validate": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "validateBasicRuleBody",
        "parameters": [
          {
            "description": "Basic rule conditions object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "actions": {
                  "example": "[{\"type\":\"op_store\",\"properties\":{\"operation\":\"save\",\"args\":{\"tag_id\":{\"source\":\"context\",\"properties\":{\"path\":[\"tag\",\"id\"]}}}}}]",
                  "type": "string"
                },
                "condition": {
                  "example": "{\"type\":\"cond_op\",\"properties\":{\"op\":\"GE\",\"args\":{\"a\":{\"type\":\"arg\",\"properties\":{\"type\":\"context\",\"payload\":{\"path\":[\"msg\",\"value\"]}}}}}}",
                  "type": "string"
                },
                "tag_type": {
                  "enum": [
                    "event",
                    "state"
                  ],
                  "example": "event",
                  "type": "string"
                },
                "value_type": {
                  "enum": [
                    "number",
                    "boolean",
                    "string",
                    "timestamp"
                  ],
                  "example": "number",
                  "type": "string"
                }
              },
              "required": [
                "condition",
                "actions",
                "value_type",
                "tag_type"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check conditions",
        "tags": [
          "basic_rules"
        ]
      }
    },
    "/clients/{client_id}/config_group_param_validators/name/unique": {
      "get": {
        "operationId": "validateConfigGroupParameterName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if config group parameter name is unique",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the config group parameter",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/config_group_validators/name/unique": {
      "get": {
        "operationId": "validateConfigGroupName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if config group name is unique",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the config group",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/config_groups": {
      "get": {
        "operationId": "getConfigGroups",
        "parameters": [
          {
            "description": "Filter by config group type id",
            "in": "query",
            "name": "type_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/configGroupObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get config groups by type id",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createConfigGroup",
        "parameters": [
          {
            "description": "Config group object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createConfigGroup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configGroupObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create config group",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/config_groups/{group_id}": {
      "delete": {
        "operationId": "deleteConfigGroup",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete config group",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getConfigGroup",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configGroupObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get config group",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Group ID",
          "in": "path",
          "name": "group_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchConfigGroup",
        "parameters": [
          {
            "description": "Config group object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchConfigGroup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configGroupObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch config group",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/connector_field_types": {
      "get": {
        "operationId": "getConnectorFieldTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/connectorFieldTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get connector field types",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/connector_types": {
      "get": {
        "operationId": "getConnectorTypes",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/connectorTypeObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get connector types",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createConnectorType",
        "parameters": [
          {
            "description": "Connector type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "description": {
                  "example": "This is connector type for Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string"
                },
                "fields": {
                  "items": {
                    "properties": {
                      "description": {
                        "example": "Connection url string for database.",
                        "type": "string"
                      },
                      "name": {
                        "example": "url",
                        "type": "string"
                      },
                      "required": {
                        "example": true,
                        "type": "boolean"
                      },
                      "type_id": {
                        "example": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "type_id",
                      "required",
                      "description"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "description",
                "fields"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create connector type",
        "tags": [
          "connectors"
        ]
      }
    },
    "/clients/{client_id}/connector_types/{type_id}": {
      "delete": {
        "operationId": "deleteConnectorType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete connector type",
        "tags": [
          "connectors"
        ]
      },
      "get": {
        "operationId": "getConnectorType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get connector type",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchConnectorType",
        "parameters": [
          {
            "description": "Connector type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "description": {
                  "example": "This is connector type for Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string",
                  "x-nullable": true
                },
                "fields": {
                  "items": {
                    "properties": {
                      "description": {
                        "example": "Connection url string for database.",
                        "type": "string"
                      },
                      "name": {
                        "example": "url",
                        "type": "string"
                      },
                      "required": {
                        "example": true,
                        "type": "boolean"
                      },
                      "type_id": {
                        "example": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "type_id",
                      "required",
                      "description"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch connector type",
        "tags": [
          "connectors"
        ]
      }
    },
    "/clients/{client_id}/connector_validators/name/unique": {
      "get": {
        "operationId": "validateConnectorName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if connector name is unique",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Connector name",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/connectors": {
      "get": {
        "operationId": "getConnectors",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by type name",
            "in": "query",
            "name": "type_name",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/connectorObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get connectors",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createConnector",
        "parameters": [
          {
            "description": "Connector params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "config": {
                  "type": "object"
                },
                "description": {
                  "example": "This is connector for Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string"
                },
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string"
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string"
                },
                "type_id": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "label",
                "type_id",
                "config",
                "description"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create connector",
        "tags": [
          "connectors"
        ]
      }
    },
    "/clients/{client_id}/connectors/{connector_id}": {
      "delete": {
        "operationId": "deleteConnector",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete connector",
        "tags": [
          "connectors"
        ]
      },
      "get": {
        "operationId": "getConnector",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get connector",
        "tags": [
          "connectors"
        ]
      },
      "parameters": [
        {
          "description": "Connector ID",
          "in": "path",
          "name": "connector_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchConnector",
        "parameters": [
          {
            "description": "Connector params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "config": {
                  "type": "object",
                  "x-nullable": true
                },
                "description": {
                  "example": "This is connector for Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string",
                  "x-nullable": true
                },
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/connectorObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch connector",
        "tags": [
          "connectors"
        ]
      }
    },
    "/clients/{client_id}/constant_validators/name/unique": {
      "get": {
        "operationId": "validateConstantName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if constant name is unique",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Constant name",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_]{2,50}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/constants": {
      "get": {
        "operationId": "getConstants",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/constantObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get constants",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createConstant",
        "parameters": [
          {
            "description": "Constant params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string"
                },
                "name": {
                  "example": "constant",
                  "pattern": "^[A-Za-z0-9_]{2,50}$",
                  "type": "string"
                },
                "type": {
                  "example": 1,
                  "type": "integer"
                },
                "value": {
                  "example": "5",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "label",
                "type",
                "value"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/constantObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create constant",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/constants/{constant_id}": {
      "delete": {
        "operationId": "deleteConstant",
        "parameters": [
          {
            "description": "Constant ID",
            "in": "path",
            "name": "constant_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete constant",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "operationId": "getConstant",
        "parameters": [
          {
            "description": "Constant ID",
            "in": "path",
            "name": "constant_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/constantObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get constant",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchConstant",
        "parameters": [
          {
            "description": "Constant ID",
            "in": "path",
            "name": "constant_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Constant params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "example": "constant",
                  "pattern": "^[A-Za-z0-9_]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                },
                "type": {
                  "example": 1,
                  "type": "integer",
                  "x-nullable": true
                },
                "value": {
                  "example": "5",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/constantObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch constant",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/device_config_versions": {
      "get": {
        "operationId": "getDeviceConfigVersions",
        "parameters": [
          {
            "description": "Filter by device id",
            "in": "query",
            "name": "device_id",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/deviceConfigVersionObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device config versions",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/device_config_versions/{version_id}": {
      "get": {
        "operationId": "getDeviceConfigVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceConfigVersionObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device config version",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "version ID",
          "in": "path",
          "name": "version_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/device_type_validators/name/unique": {
      "get": {
        "operationId": "validateDeviceTypeName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the device type name",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the device type",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/device_types": {
      "get": {
        "operationId": "getDeviceTypes",
        "parameters": [
          {
            "description": "Filter by driver id",
            "in": "query",
            "name": "driver_id",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/deviceTypeObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device types",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createDeviceType",
        "parameters": [
          {
            "description": "Device type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createDeviceType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create device type",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/device_types/{type_id}": {
      "delete": {
        "operationId": "deleteDeviceType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete device type",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getDeviceType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device type",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Device type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchDeviceType",
        "parameters": [
          {
            "description": "Device type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchDeviceType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch device type",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/device_types/{type_id}/clone": {
      "parameters": [
        {
          "description": "Device type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "cloneDeviceType",
        "parameters": [
          {
            "description": "Device type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cloneDeviceType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Clone device type",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/device_types/{type_id}/editable": {
      "get": {
        "operationId": "validateDeviceTypeEditable",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check device type is editable or not",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Device type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/device_validators/name/unique": {
      "get": {
        "operationId": "validateDeviceName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the device name",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the device",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/devices": {
      "get": {
        "operationId": "getDevices",
        "parameters": [
          {
            "description": "Filter by type id",
            "in": "query",
            "name": "type_id",
            "type": "integer"
          },
          {
            "description": "Greater than specified time",
            "in": "query",
            "name": "updated_at",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/deviceBaseObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get devices",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createDevice",
        "parameters": [
          {
            "description": "Device params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createDevice"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create device",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/devices/{device_id}": {
      "delete": {
        "operationId": "deleteDevice",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete device",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getDevice",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Device ID",
          "in": "path",
          "name": "device_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchDevice",
        "parameters": [
          {
            "description": "Device type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchDevice"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch device",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/driver_validators/name/unique": {
      "get": {
        "operationId": "validateDriverName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if driver name is unique",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Name of the driver",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,100}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/drivers": {
      "get": {
        "operationId": "getDrivers",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contains string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/driverObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get drivers",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createDriver",
        "parameters": [
          {
            "description": "Driver params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createDriver"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/driverObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create driver",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/drivers/{driver_id}": {
      "delete": {
        "operationId": "deleteDriver",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete driver",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "operationId": "getDriver",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/driverObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get driver",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Driver ID",
          "in": "path",
          "name": "driver_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchDriver",
        "parameters": [
          {
            "description": "Driver params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchDriver"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/driverObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch driver",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/exporter_field_types": {
      "get": {
        "operationId": "getExporterFieldTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/exporterFieldTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get exporter field types",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/exporter_types": {
      "get": {
        "operationId": "getExporterTypes",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/exporterTypeObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get exporter types",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createExporterType",
        "parameters": [
          {
            "description": "Exporter type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "description": {
                  "example": "This is an exporter type for Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string"
                },
                "fields": {
                  "items": {
                    "properties": {
                      "description": {
                        "example": "Exporter url string for database.",
                        "type": "string"
                      },
                      "name": {
                        "example": "url",
                        "type": "string"
                      },
                      "required": {
                        "example": true,
                        "type": "boolean"
                      },
                      "type_id": {
                        "example": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "type_id",
                      "required",
                      "description"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "description",
                "fields"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create exporter type",
        "tags": [
          "exporters"
        ]
      }
    },
    "/clients/{client_id}/exporter_types/{type_id}": {
      "delete": {
        "operationId": "deleteExporterType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete exporter type",
        "tags": [
          "exporters"
        ]
      },
      "get": {
        "operationId": "getExporterType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get exporter type",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Type ID",
          "in": "path",
          "name": "type_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchExporterType",
        "parameters": [
          {
            "description": "Exporter type params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "description": {
                  "example": "This is exporter into Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string",
                  "x-nullable": true
                },
                "fields": {
                  "items": {
                    "properties": {
                      "description": {
                        "example": "Exporter url string for database.",
                        "type": "string"
                      },
                      "name": {
                        "example": "url",
                        "type": "string"
                      },
                      "required": {
                        "example": true,
                        "type": "boolean"
                      },
                      "type_id": {
                        "example": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "type_id",
                      "required",
                      "description"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "name": {
                  "example": "postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterTypeObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch exporter type",
        "tags": [
          "exporters"
        ]
      }
    },
    "/clients/{client_id}/exporter_validators/name/unique": {
      "get": {
        "operationId": "validateExporterName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if exporter name is unique",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Exporter name",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/exporters": {
      "get": {
        "operationId": "getExporters",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by connector type_name",
            "in": "query",
            "name": "type_name",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/exporterObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get exporters",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createExporter",
        "parameters": [
          {
            "description": "Exporter params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "config": {
                  "type": "object"
                },
                "description": {
                  "example": "This is exporter into Telemedecine Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string"
                },
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string"
                },
                "name": {
                  "example": "telemedicine_postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string"
                },
                "topic_id": {
                  "example": 1,
                  "type": "integer"
                },
                "type_id": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "label",
                "type_id",
                "config",
                "description",
                "topic_id"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create exporter",
        "tags": [
          "exporters"
        ]
      }
    },
    "/clients/{client_id}/exporters/{exporter_id}": {
      "delete": {
        "operationId": "deleteExporter",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete exporter",
        "tags": [
          "exporters"
        ]
      },
      "get": {
        "operationId": "getExporter",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get exporter",
        "tags": [
          "exporters"
        ]
      },
      "parameters": [
        {
          "description": "Exporter ID",
          "in": "path",
          "name": "exporter_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchExporter",
        "parameters": [
          {
            "description": "Exporter params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "config": {
                  "type": "object",
                  "x-nullable": true
                },
                "description": {
                  "example": "This is exporter into Telemedecine Postgres database.",
                  "pattern": "^.{2,255}$",
                  "type": "string",
                  "x-nullable": true
                },
                "label": {
                  "example": "mylabel",
                  "pattern": "^.{2,200}$",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "example": "telemedicine_postgres",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/exporterObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch exporter",
        "tags": [
          "exporters"
        ]
      }
    },
    "/clients/{client_id}/root_tag": {
      "get": {
        "operationId": "getRootTag",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get root tag",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/rule_validators/name/unique": {
      "get": {
        "operationId": "validateRuleName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the rule name",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Name of the rule",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_. ]{2,200}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/rules": {
      "get": {
        "operationId": "getRules",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Filter by type",
            "in": "query",
            "name": "type",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/ruleObjectExtendedFields"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get rules",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createRule",
        "parameters": [
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createRule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ruleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create rule",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/rules/{rule_id}": {
      "delete": {
        "operationId": "deleteRule",
        "parameters": [
          {
            "description": "Rule ID",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete rule",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "operationId": "getRule",
        "parameters": [
          {
            "description": "Rule ID",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ruleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get rule",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateRule",
        "parameters": [
          {
            "description": "Rule ID",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateRule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ruleObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Update rule",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/rules/{rule_id}/schedules": {
      "get": {
        "operationId": "getRuleSchedules",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ruleSchedulesObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get rule schedules",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Rule ID",
          "in": "path",
          "name": "rule_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchRuleSchedules",
        "parameters": [
          {
            "description": "Rule schedules params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": [
                1,
                2,
                3,
                4
              ],
              "items": {
                "description": "Schedule ID",
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ruleSchedulesObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch rule schedules",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/schedule_validators/name/unique": {
      "get": {
        "operationId": "validateScheduleName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if schedule name is unique",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Schedule name",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/schedules": {
      "get": {
        "operationId": "getSchedules",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/scheduleObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get schedules",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createSchedule",
        "parameters": [
          {
            "description": "Schedule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "label": {
                  "example": "MyLabel",
                  "pattern": "^.{2,200}$",
                  "type": "string"
                },
                "name": {
                  "example": "Every 30 minutes",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string"
                },
                "value": {
                  "example": "30 15 * * 2",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "label",
                "value"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/scheduleObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create schedule",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/schedules/{schedule_id}": {
      "delete": {
        "operationId": "deleteSchedule",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete schedule",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "operationId": "getSchedule",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/scheduleObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get schedule",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Schedule ID",
          "in": "path",
          "name": "schedule_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchSchedule",
        "parameters": [
          {
            "description": "Schedule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "label": {
                  "example": "MyLabel",
                  "pattern": "^.{2,200}$",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "example": "Every 30 minutes",
                  "pattern": "^[A-Za-z0-9_.]{2,50}$",
                  "type": "string",
                  "x-nullable": true
                },
                "value": {
                  "example": "30 15 * * 2",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/scheduleObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch schedule",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/schedules/{schedule_id}/rules": {
      "get": {
        "operationId": "getScheduleRules",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/scheduleRulesObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get schedule rules",
        "tags": [
          "rules"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Schedule ID",
          "in": "path",
          "name": "schedule_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchScheduleRules",
        "parameters": [
          {
            "description": "Schedule rules params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": [
                1,
                2,
                3,
                4
              ],
              "items": {
                "description": "Rule ID",
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/scheduleRulesObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch schedule rules",
        "tags": [
          "rules"
        ]
      }
    },
    "/clients/{client_id}/tag/{tag_id}/agent": {
      "get": {
        "operationId": "getAgentByTagID",
        "parameters": [
          {
            "description": "Tag ID",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent by tag id",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/tag_validators/name/unique": {
      "get": {
        "operationId": "validateTagName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the tag name",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Name of the tag",
          "in": "query",
          "name": "name",
          "pattern": "^[A-Za-z0-9_.]{2,50}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "ID of the parent tag",
          "in": "query",
          "name": "prev_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/tags": {
      "get": {
        "operationId": "getTags",
        "parameters": [
          {
            "description": "Filter by type id",
            "in": "query",
            "maximum": 6,
            "minimum": 0,
            "name": "type_id",
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/tagObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tags",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createTag",
        "parameters": [
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTag"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/clients/{client_id}/tags/{tag_id}": {
      "delete": {
        "operationId": "deleteTag",
        "parameters": [
          {
            "description": "Tag ID",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete tag",
        "tags": [
          "tags"
        ]
      },
      "get": {
        "operationId": "getTag",
        "parameters": [
          {
            "description": "Tag ID",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tag",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateTag",
        "parameters": [
          {
            "description": "Tag ID",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Rule params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateTag"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagObjectExtendedFields"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Update tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/clients/{client_id}/tags/{tag_id}/children": {
      "get": {
        "operationId": "getTagChildren",
        "parameters": [
          {
            "description": "Tag ID",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)",
              "asc(updated_at)",
              "desc(updated_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/tagObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tag children",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/tags_agents": {
      "get": {
        "operationId": "getAgentsByTagIDs",
        "parameters": [
          {
            "description": "Tag IDs",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "tag_ids",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/agentObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agents by tag ids",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/tags_tree_path": {
      "get": {
        "operationId": "getTagsTreePath",
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagsTreePathObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get path in tags tree.",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/topic_validators/name/unique": {
      "get": {
        "operationId": "validateTopicName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check uniqueness of the topic name",
        "tags": [
          "topics"
        ]
      },
      "parameters": [
        {
          "description": "Name of the topic",
          "in": "query",
          "name": "name",
          "pattern": "^[a-z0-9_]{2,249}$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/topics": {
      "get": {
        "operationId": "getTopics",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "asc(id)",
            "description": "Must contain string like asc(field) or desc(field)",
            "enum": [
              "asc(id)",
              "desc(id)",
              "asc(created_at)",
              "desc(created_at)"
            ],
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Filter by status",
            "enum": [
              "ready",
              "creating",
              "create_failed",
              "deleting",
              "delete_failed"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/topicObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get topics",
        "tags": [
          "topics"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createTopic",
        "parameters": [
          {
            "description": "Topic params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "example": "tm_input",
                  "pattern": "^[a-z0-9_]{2,249}$",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/topicObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create topic",
        "tags": [
          "topics"
        ]
      }
    },
    "/clients/{client_id}/topics/{topic_id}": {
      "delete": {
        "operationId": "deleteTopic",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete topic",
        "tags": [
          "topics"
        ]
      },
      "get": {
        "operationId": "getTopic",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/topicObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get topic",
        "tags": [
          "topics"
        ]
      },
      "parameters": [
        {
          "description": "Topic ID",
          "in": "path",
          "name": "topic_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchTopic",
        "parameters": [
          {
            "description": "Topic params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "type": {
                  "description": "Topic type",
                  "enum": [
                    "unused",
                    "platform"
                  ],
                  "example": "platform",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/topicObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch topic",
        "tags": [
          "topics"
        ]
      }
    },
    "/clients/{client_id}/topics/{topic_id}/status": {
      "parameters": [
        {
          "description": "Topic ID",
          "in": "path",
          "name": "topic_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateTopicStatus",
        "parameters": [
          {
            "description": "Topic status object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "reason": {
                  "example": "Failed to execute task",
                  "type": "string",
                  "x-nullable": true
                },
                "status": {
                  "enum": [
                    "ready",
                    "creating",
                    "create_failed",
                    "deleting",
                    "delete_failed"
                  ],
                  "example": "ready",
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/topicObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Update topic status",
        "tags": [
          "topics"
        ]
      }
    },
    "/config_groups/types": {
      "get": {
        "operationId": "getConfigGroupTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "example": 100,
                    "type": "integer",
                    "x-omitempty": false
                  },
                  "name": {
                    "example": "string",
                    "type": "string",
                    "x-omitempty": false
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get config group types",
        "tags": [
          "devices"
        ]
      }
    },
    "/drivers/tag_types": {
      "get": {
        "operationId": "getDriversTagTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tagsTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get driver config template tag types",
        "tags": [
          "devices"
        ]
      }
    },
    "/drivers/value_types": {
      "get": {
        "operationId": "getDriversValueTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "example": 100,
                    "type": "integer",
                    "x-omitempty": false
                  },
                  "name": {
                    "example": "string",
                    "type": "string",
                    "x-omitempty": false
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get driver config template value types",
        "tags": [
          "devices"
        ]
      }
    },
    "/drivers/value_types/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "validateDriverConfigValue",
        "parameters": [
          {
            "description": "Parameters",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "type_id": {
                  "description": "Value type",
                  "type": "integer"
                },
                "value": {
                  "example": "test"
                }
              },
              "required": [
                "type_id",
                "value"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              
            }
          },
          "400": {
            "description": "Config value is not valid",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Check if the driver config value is valid for specific value type",
        "tags": [
          "devices"
        ]
      }
    },
    "/privates/clients/{client_id}/tags/{tags_ids}": {
      "get": {
        "operationId": "getPrivateTags",
        "parameters": [
          {
            "collectionFormat": "pipes",
            "description": "One or more tag identifiers",
            "in": "path",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "name": "tags_ids",
            "required": true,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tagPrivateObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tags",
        "tags": [
          "privates"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/rules/constants/types": {
      "get": {
        "operationId": "getConstantsTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/constantsTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get constants types",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/langs": {
      "get": {
        "operationId": "getRulesLangs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/rulesLangObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get rules langs",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/types": {
      "get": {
        "operationId": "getRulesTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/rulesTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get rules types",
        "tags": [
          "rules"
        ]
      }
    },
    "/swagger.json": {
      "get": {
        "operationId": "getSwaggerJSON",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get swagger json",
        "tags": [
          "swagger"
        ]
      }
    },
    "/tags/types": {
      "get": {
        "operationId": "getTagsTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tagsTypeObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tags types",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/value_types": {
      "get": {
        "operationId": "getTagsValueTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tags value types",
        "tags": [
          "tags"
        ]
      }
    }
  },
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "name": "swagger"
    },
    {
      "name": "clients"
    },
    {
      "name": "topics"
    },
    {
      "name": "api_keys"
    },
    {
      "name": "users"
    },
    {
      "name": "rules"
    },
    {
      "name": "basic_rules"
    },
    {
      "name": "tags"
    },
    {
      "name": "polygons"
    },
    {
      "name": "exporters"
    },
    {
      "name": "connectors"
    },
    {
      "name": "platform"
    },
    {
      "name": "devices"
    },
    {
      "name": "privates"
    }
  ]
}
