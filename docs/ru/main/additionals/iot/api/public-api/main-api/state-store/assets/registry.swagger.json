{
  "basePath": "/api/v1",
  "definitions": {
    "agentDeviceObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Device",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_device",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/agentDeviceTypeObject"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type"
      ],
      "type": "object"
    },
    "agentDeviceTypeObject": {
      "properties": {
        "driver": {
          "$ref": "#/definitions/driverObject"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "driver"
      ],
      "type": "object"
    },
    "agentDevicesCommandsObject": {
      "properties": {
        "command": {
          "$ref": "#/definitions/commandObject"
        },
        "devices": {
          "items": {
            "properties": {
              "command": {
                "$ref": "#/definitions/commandObject"
              },
              "device_id": {
                "example": 1,
                "type": "integer"
              }
            },
            "required": [
              "device_id",
              "command"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "agentObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "devices": {
          "items": {
            "$ref": "#/definitions/agentDeviceObject"
          },
          "type": "array"
        },
        "first_seen_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent",
          "type": "string"
        },
        "last_seen_at": {
          "description": "Timestamp with microseconds precision. Short link to $state/$last_seen_at tag value.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "name": {
          "example": "raspberrypi_agent",
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "type": {
          "$ref": "#/definitions/agentTypeObject"
        }
      },
      "required": [
        "id",
        "name",
        "client_id",
        "label",
        "type",
        "tag",
        "devices",
        "first_seen_at",
        "last_seen_at"
      ],
      "type": "object"
    },
    "agentStateObject": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "state_changed": {
          "example": true,
          "type": "boolean"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "state_changed",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "agentTypeObject": {
      "properties": {
        "drivers": {
          "items": {
            "$ref": "#/definitions/driverObject"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi agent type",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "drivers"
      ],
      "type": "object"
    },
    "commandObject": {
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": "some-id",
          "type": "string"
        },
        "reason": {
          "example": "Failed to send command",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "status": {
          "$ref": "#/definitions/commandStatus"
        },
        "tags": {
          "items": {
            "properties": {
              "tag_id": {
                "example": 1,
                "type": "integer"
              },
              "value": {
                "example": true
              }
            },
            "required": [
              "tag_id",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "tags",
        "status",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "commandStatus": {
      "enum": [
        "new",
        "sending",
        "sent",
        "received",
        "skipped",
        "done",
        "failed"
      ],
      "type": "string"
    },
    "createCommand": {
      "properties": {
        "tags": {
          "items": {
            "properties": {
              "tag_id": {
                "example": 1,
                "type": "integer"
              },
              "value": {
                "example": true
              }
            },
            "required": [
              "tag_id",
              "value"
            ],
            "type": "object"
          },
          "maxItems": 100,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "tags"
      ],
      "type": "object"
    },
    "deviceAgentObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi_agent",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/deviceAgentTypeObject"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "type"
      ],
      "type": "object"
    },
    "deviceAgentTypeObject": {
      "properties": {
        "drivers": {
          "items": {
            "$ref": "#/definitions/driverObject"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry Agent Type",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi agent type",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "drivers"
      ],
      "type": "object"
    },
    "deviceObject": {
      "properties": {
        "agent": {
          "$ref": "#/definitions/deviceAgentObject"
        },
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "first_seen_at": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "label": {
          "example": "Raspberry Device",
          "type": "string",
          "x-nullable": true
        },
        "last_seen_at": {
          "description": "Timestamp with microseconds precision. Short link to $state/$last_seen_at tag value.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "name": {
          "example": "raspberrypi_device",
          "type": "string",
          "x-nullable": true
        },
        "tag": {
          "$ref": "#/definitions/tagWithSubtreeObject"
        },
        "type": {
          "$ref": "#/definitions/deviceTypeObject"
        }
      },
      "required": [
        "id",
        "client_id",
        "name",
        "label",
        "type",
        "tag",
        "first_seen_at",
        "last_seen_at"
      ],
      "type": "object"
    },
    "deviceStateObject": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "state_changed": {
          "example": true,
          "type": "boolean"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "state_changed",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "deviceTypeObject": {
      "properties": {
        "driver": {
          "$ref": "#/definitions/driverObject"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "Raspberry",
          "type": "string"
        },
        "name": {
          "example": "raspberrypi",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "driver"
      ],
      "type": "object"
    },
    "driverObject": {
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "embedded",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "errorResponse": {
      "properties": {
        "code": {
          "example": 500,
          "type": "integer"
        },
        "message": {
          "example": "Something bad happens.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "patchAgentStateObject": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "patchAgentStatesByAgentId": {
      "properties": {
        "states": {
          "items": {
            "$ref": "#/definitions/patchAgentStateObject"
          },
          "type": "array"
        }
      },
      "required": [
        "states"
      ],
      "type": "object"
    },
    "patchCommandStatus": {
      "properties": {
        "reason": {
          "example": "Failed to send command",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/commandStatus"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "patchDeviceStateObject": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "patchDeviceStatesByDeviceId": {
      "properties": {
        "states": {
          "items": {
            "$ref": "#/definitions/patchDeviceStateObject"
          },
          "type": "array"
        }
      },
      "required": [
        "states"
      ],
      "type": "object"
    },
    "patchTagStateObject": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "tagPrivateProperties": {
      "properties": {
        "value_type": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "example": "float",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "tagPrivateWithStateResponse": {
      "properties": {
        "agent_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "device_id": {
          "example": 1,
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagPrivateProperties"
        },
        "state": {
          "description": "Contains current value of tag. Exists only when tag.type is 'state'.",
          "properties": {
            "received_at": {
              "description": "Timestamp of current state from gateway with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "timestamp": {
              "description": "Timestamp of current state from data source with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "value": {
              "description": "Value of state.",
              "example": 1,
              "x-nullable": true
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "id",
        "properties",
        "type"
      ],
      "type": "object"
    },
    "tagProperties": {
      "properties": {
        "aggregate": {
          "description": "Exists only when tag.type is aggregate",
          "properties": {
            "active": {
              "description": "Exists only when tag.type is aggregate",
              "example": true,
              "type": "boolean"
            },
            "calc_offset_sec": {
              "description": "Exists only when tag.type is aggregate",
              "example": 15,
              "type": "integer"
            },
            "operation": {
              "description": "Exists only when tag.type is aggregate",
              "enum": [
                "sum",
                "min",
                "max",
                "avg",
                "count"
              ],
              "example": "min",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "period": {
              "description": "Exists only when tag.type is aggregate",
              "enum": [
                "1m",
                "2m",
                "3m",
                "5m",
                "10m",
                "15m",
                "30m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "8h",
                "12h",
                "1d",
                "1w",
                "1M",
                "2M",
                "3M",
                "4M",
                "1Q",
                "1S",
                "1H",
                "1Y",
                "weekdays",
                "weekend",
                "custom"
              ],
              "example": "1h",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "timezone": {
              "description": "As specified in OS time zone database, exists only when tag.type is aggregate",
              "example": "Europe/Moscow",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            },
            "update_active": {
              "default": false,
              "description": "Exists only when tag.type is aggregate",
              "example": true,
              "type": "boolean",
              "x-omitempty": false
            },
            "update_interval": {
              "description": "Exists only when tag.type is aggregate, empty string if update is not active",
              "enum": [
                "",
                "10m",
                "15m",
                "30m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "8h",
                "12h",
                "1d",
                "custom"
              ],
              "example": "1h",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true
            }
          },
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "autosave": {
          "description": "Exists only when tag.type is state or event",
          "properties": {
            "digital_twins": {
              "description": "Exists only when tag.type is state",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            },
            "long_term_storage": {
              "description": "Exists only when tag.type is event",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            },
            "operational_storage": {
              "description": "Exists only when tag.type is event",
              "example": true,
              "type": "boolean",
              "x-nullable": true,
              "x-omitempty": true
            }
          },
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "readonly": {
          "description": "Exists only when tag.type is state",
          "example": true,
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "units": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "example": "C",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "value_type": {
          "description": "Exists only when tag.type is state or event or aggregate",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "example": "float",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "tagRuleObject": {
      "properties": {
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "lang": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "python",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "metadata": {
          "properties": {
            "inheritance": {
              "example": false,
              "type": "boolean",
              "x-nullable": true
            },
            "tag": {
              "example": "some/tag",
              "type": "string",
              "x-nullable": true
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "example": "tag rule",
          "type": "string"
        },
        "type": {
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "enabled",
        "lang",
        "type"
      ],
      "type": "object"
    },
    "tagStateResponse": {
      "properties": {
        "received_at": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "state_changed": {
          "example": true,
          "type": "boolean"
        },
        "tag_id": {
          "example": 1,
          "type": "integer"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision.",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "37.7"
        }
      },
      "required": [
        "tag_id",
        "value",
        "state_changed",
        "timestamp",
        "received_at"
      ],
      "type": "object"
    },
    "tagWithStateResponse": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "full_name": {
          "example": "root/sub/leaf/tag",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "some_tag",
          "type": "string"
        },
        "prev_id": {
          "example": 0,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "state": {
          "description": "Contains current value of tag. Exists only when tag.type is 'state'.",
          "properties": {
            "received_at": {
              "description": "Timestamp of current state from gateway with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "timestamp": {
              "description": "Timestamp of current state from data source with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "value": {
              "description": "Value of state.",
              "example": 1,
              "x-nullable": true
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "id",
        "name",
        "prev_id",
        "full_name",
        "type"
      ],
      "type": "object"
    },
    "tagWithSubtreeObject": {
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "example": "{\"key\": \"value\"}",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true
        },
        "children": {
          "items": {
            "$ref": "#/definitions/tagWithSubtreeObject"
          },
          "type": "array"
        },
        "full_name": {
          "example": "root/sub/leaf/tag",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "label": {
          "example": "some_label",
          "type": "string"
        },
        "name": {
          "example": "some_tag",
          "type": "string"
        },
        "prev_id": {
          "example": 0,
          "type": "integer"
        },
        "properties": {
          "$ref": "#/definitions/tagProperties"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/tagRuleObject"
          },
          "type": "array",
          "x-nullable": true,
          "x-omitempty": true
        },
        "state": {
          "description": "Contains current value of tag. Exists only when tag.type is 'state'.",
          "properties": {
            "received_at": {
              "description": "Timestamp of current state from gateway with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "timestamp": {
              "description": "Timestamp of current state from data source with microseconds precision",
              "example": 1257894000000000,
              "type": "integer",
              "x-nullable": true
            },
            "value": {
              "description": "Value of state.",
              "example": 1,
              "x-nullable": true
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "type": {
          "properties": {
            "id": {
              "example": 1,
              "type": "integer"
            },
            "name": {
              "example": "event",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        }
      },
      "required": [
        "id",
        "name",
        "label",
        "prev_id",
        "full_name",
        "type"
      ],
      "type": "object"
    },
    "variableObject": {
      "properties": {
        "client_id": {
          "example": 1,
          "type": "integer"
        },
        "expires_at": {
          "description": "Expiration timestamp with microseconds precision",
          "example": 1257895000000000,
          "type": "integer"
        },
        "name": {
          "example": "variable-123",
          "pattern": "^[A-Za-z0-9_-]{2,50}$",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision",
          "example": 1257894000000000,
          "type": "integer"
        },
        "value": {
          "example": "5",
          "type": "string"
        },
        "value_type": {
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "location",
            "timestamp"
          ],
          "example": "integer",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value_type",
        "value",
        "client_id",
        "timestamp"
      ],
      "type": "object"
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "host": "localhost",
  "info": {
    "description": "HTTP API for COIIOT Digital Twins.",
    "title": "COIIOT Digital Twins API",
    "version": "1.0.0"
  },
  "paths": {
    "/clients/{client_id}/agents/{agent_id}": {
      "get": {
        "operationId": "getAgentByID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent",
        "tags": [
          "agents"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchAgentByID",
        "parameters": [
          {
            "default": false,
            "description": "Specifies if the request is from another service or not",
            "in": "header",
            "name": "X-Inter-Service",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAgentStatesByAgentId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "states": {
                  "items": {
                    "$ref": "#/definitions/agentStateObject"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/clients/{client_id}/agents/{agent_id}/active_commands": {
      "get": {
        "operationId": "getActiveCommandsByAgentID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agentDevicesCommandsObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent and sub-devices active commands",
        "tags": [
          "agents"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/agents/{agent_id}/commands": {
      "get": {
        "operationId": "getCommandsByAgentID",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "name": "limit",
            "type": "integer",
            "x-nullable": true
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer",
            "x-nullable": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/commandObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent commands",
        "tags": [
          "agents"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "postAgentCommand",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createCommand"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Post agent command",
        "tags": [
          "agents"
        ]
      }
    },
    "/clients/{client_id}/agents/{agent_id}/commands/{command_id}": {
      "get": {
        "operationId": "getAgentCommandByID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get agent command",
        "tags": [
          "agents"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Command ID",
          "in": "path",
          "name": "command_id",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/agents/{agent_id}/commands/{command_id}/status": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Agent ID",
          "in": "path",
          "name": "agent_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Command ID",
          "in": "path",
          "name": "command_id",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchAgentCommandStatusByID",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchCommandStatus"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch agent command status",
        "tags": [
          "agents"
        ]
      }
    },
    "/clients/{client_id}/devices/{device_id}": {
      "get": {
        "operationId": "getDeviceByID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deviceObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Device ID",
          "in": "path",
          "name": "device_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchDeviceByID",
        "parameters": [
          {
            "default": false,
            "description": "Specifies if the request is from another service or not",
            "in": "header",
            "name": "X-Inter-Service",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchDeviceStatesByDeviceId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "states": {
                  "items": {
                    "$ref": "#/definitions/deviceStateObject"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch device",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/devices/{device_id}/commands": {
      "get": {
        "operationId": "getCommandsByDeviceID",
        "parameters": [
          {
            "default": 100,
            "in": "query",
            "name": "limit",
            "type": "integer",
            "x-nullable": true
          },
          {
            "default": 0,
            "in": "query",
            "name": "offset",
            "type": "integer",
            "x-nullable": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/commandObject"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 100,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device commands",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Device ID",
          "in": "path",
          "name": "device_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "postDeviceCommand",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createCommand"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Post device command",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/devices/{device_id}/commands/{command_id}": {
      "get": {
        "operationId": "getDeviceCommandByID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get device command",
        "tags": [
          "devices"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Device ID",
          "in": "path",
          "name": "device_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Command ID",
          "in": "path",
          "name": "command_id",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/clients/{client_id}/devices/{device_id}/commands/{command_id}/status": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Device ID",
          "in": "path",
          "name": "device_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Command ID",
          "in": "path",
          "name": "command_id",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchDeviceCommandStatusByID",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchCommandStatus"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/commandObject"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch device command status",
        "tags": [
          "devices"
        ]
      }
    },
    "/clients/{client_id}/tags": {
      "get": {
        "operationId": "getTagsByIDs",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "One or more tag identifiers",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "name": "tag_id",
            "required": true,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tagWithStateResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tags with states by their IDs",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/clients/{client_id}/tags/{tag_id}": {
      "get": {
        "operationId": "getTagByID",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagWithStateResponse"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get tag with state by Tag ID",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "Tag ID",
          "in": "path",
          "name": "tag_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "patchTagByID",
        "parameters": [
          {
            "default": false,
            "description": "Specifies if the request is from another service or not",
            "in": "header",
            "name": "X-Inter-Service",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchTagStateObject"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/tagStateResponse"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Patch tag by Tag ID",
        "tags": [
          "tags"
        ]
      }
    },
    "/clients/{client_id}/variables": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createVariable",
        "parameters": [
          {
            "description": "Variable params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "example": "variable",
                  "pattern": "^[A-Za-z0-9_-]{2,50}$",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Timestamp with microseconds precision",
                  "example": 1257894000000000,
                  "type": "integer"
                },
                "ttl": {
                  "default": 2592000000000,
                  "description": "Time-to-live as duration with microseconds precision, default is 30 days",
                  "example": 2592000000000,
                  "type": "integer"
                },
                "value": {
                  "example": "5",
                  "type": "string"
                },
                "value_type": {
                  "enum": [
                    "integer",
                    "float",
                    "boolean",
                    "string",
                    "location",
                    "timestamp"
                  ],
                  "example": "string",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "value_type",
                "value",
                "timestamp"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/variableObject"
            }
          },
          "400": {
            "description": "Bad params supplied or variable already exists",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Create variable",
        "tags": [
          "variables"
        ]
      }
    },
    "/clients/{client_id}/variables/{name}": {
      "delete": {
        "operationId": "deleteVariable",
        "parameters": [
          {
            "description": "Variable name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Delete variable",
        "tags": [
          "variables"
        ]
      },
      "get": {
        "operationId": "getVariable",
        "parameters": [
          {
            "description": "Variable Name",
            "in": "path",
            "name": "name",
            "pattern": "^[A-Za-z0-9_-]{2,50}$",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/variableObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get variable",
        "tags": [
          "variables"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "setVariable",
        "parameters": [
          {
            "description": "Variable Name",
            "in": "path",
            "name": "name",
            "pattern": "^[A-Za-z0-9_-]{2,50}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "ignore timestamp check",
            "in": "query",
            "name": "force",
            "type": "boolean"
          },
          {
            "description": "create if not exists",
            "in": "query",
            "name": "create",
            "type": "boolean"
          },
          {
            "description": "Variable params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "timestamp": {
                  "description": "Timestamp with microseconds precision",
                  "example": 1257894000000000,
                  "type": "integer"
                },
                "ttl": {
                  "default": 2592000000000,
                  "description": "Time-to-live as duration with microseconds precision, default is 30 days",
                  "example": 2592000000000,
                  "type": "integer"
                },
                "value": {
                  "example": "5",
                  "type": "string"
                },
                "value_type": {
                  "description": "required if variable is creating",
                  "enum": [
                    "integer",
                    "float",
                    "boolean",
                    "string",
                    "location",
                    "timestamp"
                  ],
                  "example": "integer",
                  "type": "string"
                }
              },
              "required": [
                "value",
                "timestamp"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/variableObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Set variable",
        "tags": [
          "variables"
        ]
      }
    },
    "/clients/{client_id}/variables/{name}/decrement": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "decrementVariable",
        "parameters": [
          {
            "description": "Variable Name",
            "in": "path",
            "name": "name",
            "pattern": "^[A-Za-z0-9_-]{2,50}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "create if not exists",
            "in": "query",
            "name": "create",
            "type": "boolean"
          },
          {
            "description": "Variable params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "default_value": {
                  "default": "0",
                  "description": "default value if variable is creating",
                  "example": "100",
                  "type": "string"
                },
                "delta": {
                  "default": "1",
                  "description": "value delta for decrement",
                  "example": "1",
                  "type": "string"
                },
                "ttl": {
                  "default": 2592000000000,
                  "description": "Time-to-live as duration with microseconds precision, default is 30 days",
                  "example": 2592000000000,
                  "type": "integer"
                },
                "value_type": {
                  "description": "required if variable is creating",
                  "enum": [
                    "integer",
                    "float",
                    "timestamp"
                  ],
                  "example": "integer",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/variableObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Decrement variable",
        "tags": [
          "variables"
        ]
      }
    },
    "/clients/{client_id}/variables/{name}/increment": {
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "incrementVariable",
        "parameters": [
          {
            "description": "Variable Name",
            "in": "path",
            "name": "name",
            "pattern": "^[A-Za-z0-9_-]{2,50}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "create if not exists",
            "in": "query",
            "name": "create",
            "type": "boolean"
          },
          {
            "description": "Variable params object.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "default_value": {
                  "default": "0",
                  "description": "default value if variable is creating",
                  "example": "100",
                  "type": "string"
                },
                "delta": {
                  "default": "1",
                  "description": "value delta for increment",
                  "example": "1",
                  "type": "string"
                },
                "ttl": {
                  "default": 2592000000000,
                  "description": "Time-to-live as duration with microseconds precision, default is 30 days",
                  "example": 2592000000000,
                  "type": "integer"
                },
                "value_type": {
                  "description": "required if variable is creating",
                  "enum": [
                    "integer",
                    "float",
                    "timestamp"
                  ],
                  "example": "integer",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/variableObject"
            }
          },
          "400": {
            "description": "Bad params supplied",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Increment variable",
        "tags": [
          "variables"
        ]
      }
    },
    "/privates/clients/{client_id}/tags_states/{tags_ids}": {
      "get": {
        "operationId": "getPrivateTagsStatesByIDs",
        "parameters": [
          {
            "collectionFormat": "pipes",
            "description": "One or more tag identifiers",
            "in": "path",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "name": "tags_ids",
            "required": true,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tagPrivateWithStateResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad params",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get private tags with states by their IDs",
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "description": "Client ID",
          "in": "path",
          "name": "client_id",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/swagger.json": {
      "get": {
        "operationId": "getSwaggerJSON",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        },
        "summary": "Get swagger json",
        "tags": [
          "swagger"
        ]
      }
    }
  },
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "name": "swagger"
    },
    {
      "name": "devices"
    },
    {
      "name": "agents"
    }
  ]
}
