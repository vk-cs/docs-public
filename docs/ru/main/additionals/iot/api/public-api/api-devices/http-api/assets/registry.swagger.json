{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "COIIOT Gateway HTTP REST API",
    "title": "COIIOT Gateway HTTP REST API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/agents/config": {
      "get": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agents"
        ],
        "summary": "Get agent config",
        "operationId": "getAgentConfig",
        "parameters": [
          {
            "type": "string",
            "x-nullable": true,
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConfigObject"
            }
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/agents/{agent_id}/commands/{command_id}/status": {
      "patch": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agents"
        ],
        "summary": "Patch agent command status",
        "operationId": "patchAgentCommandStatus",
        "parameters": [
          {
            "type": "integer",
            "description": "Agent ID",
            "name": "agent_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Command ID",
            "name": "command_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchCommandStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/commands": {
      "get": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agents"
        ],
        "summary": "Get agent and sub-devices active commands",
        "operationId": "getCommands",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AgentDevicesCommandsObject"
            }
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/devices/config/{version_id}": {
      "get": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "devices"
        ],
        "summary": "Get device versioned config",
        "operationId": "getDeviceVersionedConfig",
        "parameters": [
          {
            "type": "integer",
            "description": "version ID",
            "name": "version_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceConfigVersionedObject"
            }
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/devices/{device_id}/commands/{command_id}/status": {
      "patch": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "devices"
        ],
        "summary": "Patch device command status",
        "operationId": "patchDeviceCommandStatus",
        "parameters": [
          {
            "type": "integer",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Command ID",
            "name": "command_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchCommandStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Add event",
        "operationId": "addEvent",
        "parameters": [
          {
            "description": "Event object.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/logs": {
      "post": {
        "security": [
          {
            "basicAuth": [
              
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "logs"
        ],
        "summary": "Add log",
        "operationId": "addLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddLog"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad params suplied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "swagger"
        ],
        "summary": "Get swagger json",
        "operationId": "getSwaggerJSON",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddEvent": {
      "type": "object",
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "maxItems": 60,
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/TagValueObject"
          }
        }
      }
    },
    "AddLog": {
      "type": "object",
      "required": [
        "level",
        "message"
      ],
      "properties": {
        "level": {
          "type": "integer",
          "format": "uint8",
          "example": 1
        },
        "message": {
          "type": "string",
          "example": "example message"
        }
      }
    },
    "AgentConfigObject": {
      "type": "object",
      "required": [
        "id",
        "name",
        "tag",
        "devices"
      ],
      "properties": {
        "config_id": {
          "type": "integer",
          "x-nullable": true,
          "example": 1
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceConfigObject"
          }
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "some_agent"
        },
        "tag": {
          "$ref": "#/definitions/TagConfigObject"
        }
      }
    },
    "AgentDevicesCommandsObject": {
      "type": "object",
      "required": [
        "devices"
      ],
      "properties": {
        "command": {
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/CommandObject"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "device_id",
              "command"
            ],
            "properties": {
              "command": {
                "$ref": "#/definitions/CommandObject"
              },
              "device_id": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      }
    },
    "CommandObject": {
      "type": "object",
      "required": [
        "id",
        "tags",
        "status",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "created_at": {
          "description": "Timestamp with microseconds precision",
          "type": "integer",
          "example": 1257894000000000
        },
        "id": {
          "type": "string",
          "example": "some-id"
        },
        "reason": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "Failed to send command"
        },
        "status": {
          "$ref": "#/definitions/CommandStatus"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "tag_id",
              "value"
            ],
            "properties": {
              "tag_id": {
                "type": "integer",
                "example": 1
              },
              "value": {
                "example": true
              }
            }
          }
        },
        "updated_at": {
          "description": "Timestamp with microseconds precision",
          "type": "integer",
          "example": 1257894000000000
        }
      }
    },
    "CommandStatus": {
      "type": "string",
      "enum": [
        "new",
        "sending",
        "sent",
        "received",
        "skipped",
        "done",
        "failed"
      ]
    },
    "ConfigObject": {
      "type": "object",
      "required": [
        "version",
        "agent"
      ],
      "properties": {
        "agent": {
          "$ref": "#/definitions/AgentConfigObject"
        },
        "version": {
          "type": "string",
          "example": "v1"
        }
      }
    },
    "DeviceConfigObject": {
      "type": "object",
      "required": [
        "id",
        "name",
        "tag",
        "driver"
      ],
      "properties": {
        "config_id": {
          "type": "integer",
          "x-nullable": true,
          "example": 1
        },
        "driver": {
          "$ref": "#/definitions/DriverConfigObject"
        },
        "driver_config": {
          "description": "Non typed dictionary for setting template. Deprecated, use driver_config in tags",
          "type": "object",
          "example": {
            "key": "value"
          }
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "some_device"
        },
        "tag": {
          "$ref": "#/definitions/TagConfigObject"
        }
      }
    },
    "DeviceConfigVersionedObject": {
      "type": "object",
      "required": [
        "id",
        "device_id"
      ],
      "properties": {
        "created_at": {
          "description": "Creation timestamp with microseconds precision",
          "type": "integer",
          "x-nullable": true,
          "example": 1257894000000000
        },
        "device_config": {
          "description": "Non typed dictionary for device settings",
          "type": "object",
          "x-nullable": true,
          "example": {
            "key": "value"
          }
        },
        "device_id": {
          "type": "integer",
          "example": 1
        },
        "id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "DriverConfigObject": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "modbus driver"
        },
        "protocol": {
          "type": "string",
          "x-nullable": true,
          "example": "modbus"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 300
        },
        "message": {
          "type": "string",
          "example": "Something bad happens."
        }
      }
    },
    "PatchCommandStatus": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Failed to send command"
        },
        "status": {
          "$ref": "#/definitions/CommandStatus"
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision",
          "type": "integer",
          "x-nullable": true,
          "example": 1257894000000000
        }
      }
    },
    "TagConfigObject": {
      "type": "object",
      "required": [
        "id",
        "name",
        "properties",
        "type"
      ],
      "properties": {
        "attrs": {
          "description": "Non typed dictionary for user defined data.",
          "type": "object",
          "x-nullable": true,
          "x-omitempty": true,
          "example": {
            "key": "value"
          }
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagConfigObject"
          },
          "x-nullable": true,
          "example": [
            
          ]
        },
        "driver_config": {
          "description": "Non typed dictionary for setting template.",
          "type": "object",
          "example": {
            "key": "value"
          }
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "some_tag"
        },
        "properties": {
          "type": "object",
          "example": {
            "a": "b"
          }
        },
        "type": {
          "$ref": "#/definitions/TagTypeObject"
        }
      }
    },
    "TagTypeObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "x-nullable": true,
          "example": 1
        },
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "undefined"
        }
      }
    },
    "TagValueObject": {
      "type": "object",
      "required": [
        "id",
        "value",
        "timestamp"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "timestamp": {
          "description": "Timestamp with microseconds precision",
          "type": "integer",
          "format": "int64",
          "example": 1257894000000000
        },
        "value": {
          "description": "Value of the tag",
          "example": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "tags": [
    {
      "name": "swagger"
    },
    {
      "name": "agents"
    },
    {
      "name": "events"
    },
    {
      "name": "devices"
    },
    {
      "name": "logs"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
